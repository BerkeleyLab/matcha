var tipuesearch = {"pages":[{"title":" Matcha ","text":"Matcha","tags":"home","loc":"index.html"},{"title":"input_t – Matcha ","text":"type, public :: input_t Inherited by type~~input_t~~InheritedByGraph type~input_t input_t type~output_t output_t type~output_t->type~input_t input_ Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Contents Variables num_cells_ num_positions_ num_dimensions_ num_intervals_ time_step_ Type-Bound Procedures num_cells num_positions num_dimensions num_intervals time_step sample_distribution Components Type Visibility Attributes Name Initial integer, private :: num_cells_ = 6000 integer, private :: num_positions_ = 6000 integer, private :: num_dimensions_ = 3 integer, private :: num_intervals_ = 4 double precision, private :: time_step_ = 0.1D0 Type-Bound Procedures procedure, public :: num_cells interface private pure module module function num_cells(self) result(n) Implementation → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer procedure, public :: num_positions interface private pure module module function num_positions(self) result(n) Implementation → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer procedure, public :: num_dimensions interface private pure module module function num_dimensions(self) result(n) Implementation → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer procedure, public :: num_intervals interface private pure module module function num_intervals(self) result(n) Implementation → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer procedure, public :: time_step interface private pure module module function time_step(self) result(dt) Implementation → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value double precision procedure, public :: sample_distribution interface private pure module module function sample_distribution(self) result(empirical_distribution) Implementation → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value double precision,allocatable, (:,:)","tags":"","loc":"type/input_t.html"},{"title":"output_t – Matcha ","text":"type, public :: output_t Encapsulate an input/result pair Inherits type~~output_t~~InheritsGraph type~output_t output_t type~input_t input_t type~output_t->type~input_t input_ type~t_cell_collection_t t_cell_collection_t type~output_t->type~t_cell_collection_t history_ Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Contents Variables input_ history_ Constructor output_t Type-Bound Procedures simulated_distribution my_num_cells Components Type Visibility Attributes Name Initial type( input_t ), private :: input_ type( t_cell_collection_t ), private, allocatable :: history_ (:) Constructor public interface output_t private pure module function construct(input, history) result(output) Construct a new output_t object Arguments Type Intent Optional Attributes Name type( input_t ), intent(in) :: input type( t_cell_collection_t ), intent(in) :: history (:) Return Value type( output_t ) Type-Bound Procedures procedure, public :: simulated_distribution interface private module module function simulated_distribution(self) result(output_distribution) Implementation → The result is a histogram calculated from the simulation output Arguments Type Intent Optional Attributes Name class( output_t ), intent(in) :: self Return Value double precision,allocatable, (:,:) procedure, public :: my_num_cells interface private pure module module function my_num_cells(self) result(num_cells) Implementation → Arguments Type Intent Optional Attributes Name class( output_t ), intent(in) :: self Return Value integer","tags":"","loc":"type/output_t.html"},{"title":"t_cell_collection_t – Matcha ","text":"type, public :: t_cell_collection_t Encapsulate the state of a collection of T cells Inherited by type~~t_cell_collection_t~~InheritedByGraph type~t_cell_collection_t t_cell_collection_t type~output_t output_t type~output_t->type~t_cell_collection_t history_ Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Contents Variables positions_ time_ Constructor t_cell_collection_t Type-Bound Procedures positions time Components Type Visibility Attributes Name Initial double precision, private, allocatable :: positions_ (:,:) position vectors double precision, private :: time_ time stamp Constructor public interface t_cell_collection_t private pure module function construct(positions, time) result(t_cell_collection) Return a t_cell_collection_t object with rescaled position vectors and the provided time stamp Arguments Type Intent Optional Attributes Name double precision, intent(in) :: positions (:,:) double precision, intent(in) :: time Return Value type( t_cell_collection_t ) Type-Bound Procedures procedure, public :: positions interface private pure module module function positions(self) result(my_positions) Implementation → Return the t_cell_collection_t object's position vectors Arguments Type Intent Optional Attributes Name class( t_cell_collection_t ), intent(in) :: self Return Value double precision,allocatable, (:,:) procedure, public :: time interface private elemental module module function time(self) result(my_time) Implementation → Return the t_cell_collection_t object's time stamp Arguments Type Intent Optional Attributes Name class( t_cell_collection_t ), intent(in) :: self Return Value double precision","tags":"","loc":"type/t_cell_collection_t.html"},{"title":"t_cell_collection_bind_C_t – Matcha ","text":"type, public, bind(C) :: t_cell_collection_bind_C_t Inherits type~~t_cell_collection_bind_c_t~~InheritsGraph type~t_cell_collection_bind_c_t t_cell_collection_bind_C_t c_ptr c_ptr type~t_cell_collection_bind_c_t->c_ptr positions_ptr Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Contents Variables positions_ptr positions_shape time Constructor t_cell_collection_bind_C_t Components Type Visibility Attributes Name Initial type(c_ptr), private :: positions_ptr integer(kind=c_int), private :: positions_shape (positions_dimension) real(kind=c_double), private :: time Constructor public interface t_cell_collection_bind_C_t private elemental module function construct_bind_C(t_cell_collection) result(t_cell_collection_bind_C) Result is bind(C) representation of the data inside a t_cell_collection_t object Arguments Type Intent Optional Attributes Name type( t_cell_collection_t ), intent(in), target :: t_cell_collection Return Value type( t_cell_collection_bind_C_t )","tags":"","loc":"type/t_cell_collection_bind_c_t.html"},{"title":"subdomain_t – Matcha ","text":"type, public :: subdomain_t Contents Variables s_ dx dy values Type-Bound Procedures define laplacian operator(.laplacian.) multiply operator(*) add operator(+) assign_and_sync assignment(=) Components Type Visibility Attributes Name Initial real, private, allocatable :: s_ (:,:) procedure, public :: dx procedure, public :: dy procedure, public :: values Type-Bound Procedures procedure, public, pass(self) :: define interface private module module subroutine define(side, boundary_val, internal_val, n, self) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: side real, intent(in) :: boundary_val real, intent(in) :: internal_val integer, intent(in) :: n number of grid points in each coordinate direction class( subdomain_t ), intent(out) :: self procedure, public :: laplacian interface private pure module module function laplacian(rhs) result(laplacian_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: rhs Return Value type( subdomain_t ) generic, public :: operator(.laplacian.) => laplacian private interface laplacian () Arguments None procedure, public, pass(rhs) :: multiply interface private pure module module function multiply(lhs, rhs) result(product) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: lhs class( subdomain_t ), intent(in) :: rhs Return Value type( subdomain_t ) generic, public :: operator(*) => multiply private interface multiply () Arguments None procedure, public :: add interface private pure module module function add(lhs, rhs) result(total) Implementation → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: lhs type( subdomain_t ), intent(in) :: rhs Return Value type( subdomain_t ) generic, public :: operator(+) => add private interface add () Arguments None procedure, public :: assign_and_sync interface private module module subroutine assign_and_sync(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(out) :: lhs type( subdomain_t ), intent(in) :: rhs generic, public :: assignment(=) => assign_and_sync private interface assign_and_sync () Arguments None","tags":"","loc":"type/subdomain_t.html"},{"title":"distribution_t – Matcha ","text":"type, public :: distribution_t Contents Variables vel_ cumulative_distribution_ Constructor distribution_t Type-Bound Procedures cumulative_distribution velocities Components Type Visibility Attributes Name Initial double precision, private, allocatable, dimension(:) :: vel_ double precision, private, allocatable, dimension(:) :: cumulative_distribution_ Constructor public interface distribution_t private pure module function construct(sample_distribution) result(distribution) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: sample_distribution (:,:) Return Value type( distribution_t ) Type-Bound Procedures procedure, public :: cumulative_distribution interface private pure module module function cumulative_distribution(self) result(my_cumulative_distribution) Implementation → Arguments Type Intent Optional Attributes Name class( distribution_t ), intent(in) :: self Return Value double precision,allocatable, (:) procedure, public :: velocities interface private pure module module function velocities(self, speeds, directions) result(my_velocities) Implementation → Return the t_cell_collection_t object's velocity vectors Arguments Type Intent Optional Attributes Name class( distribution_t ), intent(in) :: self double precision, intent(in) :: speeds (:,:) double precision, intent(in) :: directions (:,:,:) Return Value double precision,allocatable, (:,:,:)","tags":"","loc":"type/distribution_t.html"},{"title":"matcha – Matcha","text":"interface Calls interface~~matcha~~CallsGraph interface~matcha matcha proc~matcha matcha interface~matcha->proc~matcha random_positions random_positions proc~matcha->random_positions v v proc~matcha->v random_4vectors random_4vectors proc~matcha->random_4vectors random_init random_init proc~matcha->random_init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~matcha~~CalledByGraph interface~matcha matcha program~main main program~main->interface~matcha Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module module function matcha(input) result(history) Implementation → Arguments Type Intent Optional Attributes Name type( input_t ), intent(in) :: input Return Value type( t_cell_collection_t ),allocatable,(:)","tags":"","loc":"interface/matcha.html"},{"title":"num_cells – Matcha","text":"interface Calls interface~~num_cells~~CallsGraph interface~num_cells num_cells proc~num_cells num_cells interface~num_cells->proc~num_cells Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private pure module module function num_cells(self) result(n) Implementation → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer","tags":"","loc":"interface/num_cells.html"},{"title":"num_positions – Matcha","text":"interface Calls interface~~num_positions~~CallsGraph interface~num_positions num_positions proc~num_positions num_positions interface~num_positions->proc~num_positions Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private pure module module function num_positions(self) result(n) Implementation → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer","tags":"","loc":"interface/num_positions.html"},{"title":"num_dimensions – Matcha","text":"interface Calls interface~~num_dimensions~~CallsGraph interface~num_dimensions num_dimensions proc~num_dimensions num_dimensions interface~num_dimensions->proc~num_dimensions Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private pure module module function num_dimensions(self) result(n) Implementation → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer","tags":"","loc":"interface/num_dimensions.html"},{"title":"num_intervals – Matcha","text":"interface Calls interface~~num_intervals~~CallsGraph interface~num_intervals num_intervals proc~num_intervals num_intervals interface~num_intervals->proc~num_intervals Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private pure module module function num_intervals(self) result(n) Implementation → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer","tags":"","loc":"interface/num_intervals.html"},{"title":"time_step – Matcha","text":"interface Calls interface~~time_step~~CallsGraph interface~time_step time_step proc~time_step time_step interface~time_step->proc~time_step Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private pure module module function time_step(self) result(dt) Implementation → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value double precision","tags":"","loc":"interface/time_step.html"},{"title":"sample_distribution – Matcha","text":"interface Calls interface~~sample_distribution~~CallsGraph interface~sample_distribution sample_distribution proc~sample_distribution sample_distribution interface~sample_distribution->proc~sample_distribution Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private pure module module function sample_distribution(self) result(empirical_distribution) Implementation → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value double precision,allocatable,(:,:)","tags":"","loc":"interface/sample_distribution.html"},{"title":"do_concurrent_sampled_speeds – Matcha","text":"interface Calls interface~~do_concurrent_sampled_speeds~~CallsGraph interface~do_concurrent_sampled_speeds do_concurrent_sampled_speeds proc~do_concurrent_sampled_speeds do_concurrent_sampled_speeds interface~do_concurrent_sampled_speeds->proc~do_concurrent_sampled_speeds Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~do_concurrent_sampled_speeds~~CalledByGraph interface~do_concurrent_sampled_speeds do_concurrent_sampled_speeds proc~velocities velocities proc~velocities->interface~do_concurrent_sampled_speeds interface~velocities velocities interface~velocities->proc~velocities Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public pure module module subroutine do_concurrent_sampled_speeds(speeds, vel, cumulative_distribution, sampled_speeds) bind(C) Implementation → Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: speeds (:,:) real(kind=c_double), intent(in) :: vel (:) real(kind=c_double), intent(in) :: cumulative_distribution (:) real(kind=c_double), intent(out), allocatable :: sampled_speeds (:,:)","tags":"","loc":"interface/do_concurrent_sampled_speeds.html"},{"title":"do_concurrent_my_velocities – Matcha","text":"interface Calls interface~~do_concurrent_my_velocities~~CallsGraph interface~do_concurrent_my_velocities do_concurrent_my_velocities proc~do_concurrent_my_velocities do_concurrent_my_velocities interface~do_concurrent_my_velocities->proc~do_concurrent_my_velocities Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~do_concurrent_my_velocities~~CalledByGraph interface~do_concurrent_my_velocities do_concurrent_my_velocities proc~velocities velocities proc~velocities->interface~do_concurrent_my_velocities interface~velocities velocities interface~velocities->proc~velocities Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public pure module module subroutine do_concurrent_my_velocities(nsteps, dir, sampled_speeds, my_velocities) bind(C) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: nsteps real(kind=c_double), intent(in) :: dir (:,:,:) real(kind=c_double), intent(in) :: sampled_speeds (:,:) real(kind=c_double), intent(out), allocatable :: my_velocities (:,:,:)","tags":"","loc":"interface/do_concurrent_my_velocities.html"},{"title":"do_concurrent_k – Matcha","text":"interface Calls interface~~do_concurrent_k~~CallsGraph interface~do_concurrent_k do_concurrent_k proc~do_concurrent_k do_concurrent_k interface~do_concurrent_k->proc~do_concurrent_k Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~do_concurrent_k~~CalledByGraph interface~do_concurrent_k do_concurrent_k proc~simulated_distribution simulated_distribution proc~simulated_distribution->interface~do_concurrent_k interface~simulated_distribution simulated_distribution interface~simulated_distribution->proc~simulated_distribution Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public pure module module subroutine do_concurrent_k(speeds, vel, k) bind(C) Implementation → Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: speeds (:) real(kind=c_double), intent(in) :: vel (:) integer(kind=c_int), intent(out), allocatable :: k (:)","tags":"","loc":"interface/do_concurrent_k.html"},{"title":"do_concurrent_output_distribution – Matcha","text":"interface Calls interface~~do_concurrent_output_distribution~~CallsGraph interface~do_concurrent_output_distribution do_concurrent_output_distribution proc~do_concurrent_output_distribution do_concurrent_output_distribution interface~do_concurrent_output_distribution->proc~do_concurrent_output_distribution Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~do_concurrent_output_distribution~~CalledByGraph interface~do_concurrent_output_distribution do_concurrent_output_distribution proc~simulated_distribution simulated_distribution proc~simulated_distribution->interface~do_concurrent_output_distribution interface~simulated_distribution simulated_distribution interface~simulated_distribution->proc~simulated_distribution Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public pure module module subroutine do_concurrent_output_distribution(nintervals, speed, freq, emp_distribution, k, output_distribution) bind(C) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: nintervals integer(kind=c_int), intent(in) :: speed integer(kind=c_int), intent(in) :: freq real(kind=c_double), intent(in) :: emp_distribution (:,:) integer(kind=c_int), intent(in) :: k (:) real(kind=c_double), intent(out), allocatable :: output_distribution (:,:)","tags":"","loc":"interface/do_concurrent_output_distribution.html"},{"title":"do_concurrent_speeds – Matcha","text":"interface Calls interface~~do_concurrent_speeds~~CallsGraph interface~do_concurrent_speeds do_concurrent_speeds proc~do_concurrent_speeds do_concurrent_speeds interface~do_concurrent_speeds->proc~do_concurrent_speeds u u proc~do_concurrent_speeds->u Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~do_concurrent_speeds~~CalledByGraph interface~do_concurrent_speeds do_concurrent_speeds proc~simulated_distribution simulated_distribution proc~simulated_distribution->interface~do_concurrent_speeds interface~simulated_distribution simulated_distribution interface~simulated_distribution->proc~simulated_distribution Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public module module subroutine do_concurrent_speeds(history, speeds) bind(C) Implementation → Arguments Type Intent Optional Attributes Name type( t_cell_collection_bind_C_t ), intent(in) :: history (:) real(kind=c_double), intent(out), allocatable :: speeds (:)","tags":"","loc":"interface/do_concurrent_speeds.html"},{"title":"output_t – Matcha","text":"public interface output_t Contents Functions construct Functions private pure module function construct(input, history) result(output) Construct a new output_t object Arguments Type Intent Optional Attributes Name type( input_t ), intent(in) :: input type( t_cell_collection_t ), intent(in) :: history (:) Return Value type( output_t )","tags":"","loc":"interface/output_t.html"},{"title":"simulated_distribution – Matcha","text":"interface Calls interface~~simulated_distribution~~CallsGraph interface~simulated_distribution simulated_distribution proc~simulated_distribution simulated_distribution interface~simulated_distribution->proc~simulated_distribution interface~do_concurrent_speeds do_concurrent_speeds proc~simulated_distribution->interface~do_concurrent_speeds interface~do_concurrent_output_distribution do_concurrent_output_distribution proc~simulated_distribution->interface~do_concurrent_output_distribution emp_distribution emp_distribution proc~simulated_distribution->emp_distribution interface~do_concurrent_k do_concurrent_k proc~simulated_distribution->interface~do_concurrent_k proc~do_concurrent_speeds do_concurrent_speeds interface~do_concurrent_speeds->proc~do_concurrent_speeds proc~do_concurrent_output_distribution do_concurrent_output_distribution interface~do_concurrent_output_distribution->proc~do_concurrent_output_distribution proc~do_concurrent_k do_concurrent_k interface~do_concurrent_k->proc~do_concurrent_k u u proc~do_concurrent_speeds->u Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module module function simulated_distribution(self) result(output_distribution) Implementation → Arguments Type Intent Optional Attributes Name class( output_t ), intent(in) :: self Return Value double precision,allocatable,(:,:) Description The result is a histogram calculated from the simulation output","tags":"","loc":"interface/simulated_distribution.html"},{"title":"my_num_cells – Matcha","text":"interface Calls interface~~my_num_cells~~CallsGraph interface~my_num_cells my_num_cells proc~my_num_cells my_num_cells interface~my_num_cells->proc~my_num_cells Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private pure module module function my_num_cells(self) result(num_cells) Implementation → Arguments Type Intent Optional Attributes Name class( output_t ), intent(in) :: self Return Value integer","tags":"","loc":"interface/my_num_cells.html"},{"title":"t_cell_collection_t – Matcha","text":"public interface t_cell_collection_t Contents Functions construct Functions private pure module function construct(positions, time) result(t_cell_collection) Return a t_cell_collection_t object with rescaled position vectors and the provided time stamp Arguments Type Intent Optional Attributes Name double precision, intent(in) :: positions (:,:) double precision, intent(in) :: time Return Value type( t_cell_collection_t )","tags":"","loc":"interface/t_cell_collection_t.html"},{"title":"t_cell_collection_bind_C_t – Matcha","text":"public interface t_cell_collection_bind_C_t Contents Functions construct_bind_C Functions private elemental module function construct_bind_C(t_cell_collection) result(t_cell_collection_bind_C) Result is bind(C) representation of the data inside a t_cell_collection_t object Arguments Type Intent Optional Attributes Name type( t_cell_collection_t ), intent(in), target :: t_cell_collection Return Value type( t_cell_collection_bind_C_t )","tags":"","loc":"interface/t_cell_collection_bind_c_t.html"},{"title":"positions – Matcha","text":"interface Calls interface~~positions~~CallsGraph interface~positions positions proc~positions positions interface~positions->proc~positions assert assert proc~positions->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private pure module module function positions(self) result(my_positions) Implementation → Arguments Type Intent Optional Attributes Name class( t_cell_collection_t ), intent(in) :: self Return Value double precision,allocatable,(:,:) Description Return the t_cell_collection_t object's position vectors","tags":"","loc":"interface/positions.html"},{"title":"time – Matcha","text":"interface Calls interface~~time~~CallsGraph interface~time time proc~time time interface~time->proc~time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private elemental module module function time(self) result(my_time) Implementation → Arguments Type Intent Optional Attributes Name class( t_cell_collection_t ), intent(in) :: self Return Value double precision Description Return the t_cell_collection_t object's time stamp","tags":"","loc":"interface/time.html"},{"title":"monotonically_increasing – Matcha","text":"pure function monotonically_increasing(f) result(monotonic) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: f (:) Return Value logical Called by proc~~monotonically_increasing~~CalledByGraph proc~monotonically_increasing monotonically_increasing proc~construct construct proc~construct->proc~monotonically_increasing Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/monotonically_increasing.html"},{"title":"values – Matcha","text":"interface Calls interface~~values~~CallsGraph interface~values values proc~values values interface~values->proc~values assert assert proc~values->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private pure module module function values(self) result(my_values) Implementation → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: self Return Value real,allocatable,(:,:)","tags":"","loc":"interface/values.html"},{"title":"dx – Matcha","text":"interface Calls interface~~dx~~CallsGraph interface~dx dx proc~dx dx interface~dx->proc~dx Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private pure module module function dx(self) result(my_dx) Implementation → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: self Return Value real","tags":"","loc":"interface/dx.html"},{"title":"dy – Matcha","text":"interface Calls interface~~dy~~CallsGraph interface~dy dy proc~dy dy interface~dy->proc~dy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private pure module module function dy(self) result(my_dy) Implementation → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: self Return Value real","tags":"","loc":"interface/dy.html"},{"title":"laplacian – Matcha","text":"interface Calls interface~~laplacian~~CallsGraph interface~laplacian laplacian proc~laplacian laplacian interface~laplacian->proc~laplacian assert assert proc~laplacian->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private pure module module function laplacian(rhs) result(laplacian_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: rhs Return Value type( subdomain_t )","tags":"","loc":"interface/laplacian.html"},{"title":"multiply – Matcha","text":"interface Calls interface~~multiply~~CallsGraph interface~multiply multiply proc~multiply multiply interface~multiply->proc~multiply assert assert proc~multiply->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private pure module module function multiply(lhs, rhs) result(product) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: lhs class( subdomain_t ), intent(in) :: rhs Return Value type( subdomain_t )","tags":"","loc":"interface/multiply.html"},{"title":"add – Matcha","text":"interface Calls interface~~add~~CallsGraph interface~add add proc~add add interface~add->proc~add assert assert proc~add->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private pure module module function add(lhs, rhs) result(total) Implementation → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: lhs type( subdomain_t ), intent(in) :: rhs Return Value type( subdomain_t )","tags":"","loc":"interface/add.html"},{"title":"define – Matcha","text":"interface Calls interface~~define~~CallsGraph interface~define define proc~define define interface~define->proc~define intrinsic_array_t intrinsic_array_t proc~define->intrinsic_array_t assert assert proc~define->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module module subroutine define(side, boundary_val, internal_val, n, self) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: side real, intent(in) :: boundary_val real, intent(in) :: internal_val integer, intent(in) :: n number of grid points in each coordinate direction class( subdomain_t ), intent(out) :: self","tags":"","loc":"interface/define.html"},{"title":"assign_and_sync – Matcha","text":"interface Calls interface~~assign_and_sync~~CallsGraph interface~assign_and_sync assign_and_sync proc~assign_and_sync assign_and_sync interface~assign_and_sync->proc~assign_and_sync assert assert proc~assign_and_sync->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private module module subroutine assign_and_sync(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(out) :: lhs type( subdomain_t ), intent(in) :: rhs","tags":"","loc":"interface/assign_and_sync.html"},{"title":"distribution_t – Matcha","text":"public interface distribution_t Contents Functions construct Functions private pure module function construct(sample_distribution) result(distribution) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: sample_distribution (:,:) Return Value type( distribution_t )","tags":"","loc":"interface/distribution_t.html"},{"title":"cumulative_distribution – Matcha","text":"interface Calls interface~~cumulative_distribution~~CallsGraph interface~cumulative_distribution cumulative_distribution proc~cumulative_distribution cumulative_distribution interface~cumulative_distribution->proc~cumulative_distribution assert assert proc~cumulative_distribution->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private pure module module function cumulative_distribution(self) result(my_cumulative_distribution) Implementation → Arguments Type Intent Optional Attributes Name class( distribution_t ), intent(in) :: self Return Value double precision,allocatable,(:)","tags":"","loc":"interface/cumulative_distribution.html"},{"title":"velocities – Matcha","text":"interface Calls interface~~velocities~~CallsGraph interface~velocities velocities proc~velocities velocities interface~velocities->proc~velocities assert assert proc~velocities->assert interface~do_concurrent_sampled_speeds do_concurrent_sampled_speeds proc~velocities->interface~do_concurrent_sampled_speeds interface~do_concurrent_my_velocities do_concurrent_my_velocities proc~velocities->interface~do_concurrent_my_velocities proc~do_concurrent_sampled_speeds do_concurrent_sampled_speeds interface~do_concurrent_sampled_speeds->proc~do_concurrent_sampled_speeds proc~do_concurrent_my_velocities do_concurrent_my_velocities interface~do_concurrent_my_velocities->proc~do_concurrent_my_velocities Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. private pure module module function velocities(self, speeds, directions) result(my_velocities) Implementation → Arguments Type Intent Optional Attributes Name class( distribution_t ), intent(in) :: self double precision, intent(in) :: speeds (:,:) double precision, intent(in) :: directions (:,:,:) Return Value double precision,allocatable,(:,:,:) Description Return the t_cell_collection_t object's velocity vectors","tags":"","loc":"interface/velocities.html"},{"title":"matcha – Matcha","text":"module procedure matcha module module function matcha(input) result(history) Interface → Arguments Type Intent Optional Attributes Name type( input_t ), intent(in) :: input Return Value type( t_cell_collection_t ),allocatable,(:) Calls proc~~matcha~~CallsGraph proc~matcha matcha random_positions random_positions proc~matcha->random_positions v v proc~matcha->v random_4vectors random_4vectors proc~matcha->random_4vectors random_init random_init proc~matcha->random_init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~matcha~~CalledByGraph proc~matcha matcha interface~matcha matcha interface~matcha->proc~matcha program~main main program~main->interface~matcha Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/matcha.html"},{"title":"define – Matcha","text":"module procedure define module module subroutine define(side, boundary_val, internal_val, n, self) Interface → Arguments Type Intent Optional Attributes Name real, intent(in) :: side real, intent(in) :: boundary_val real, intent(in) :: internal_val integer, intent(in) :: n number of grid points in each coordinate direction class( subdomain_t ), intent(out) :: self Calls proc~~define~~CallsGraph proc~define define intrinsic_array_t intrinsic_array_t proc~define->intrinsic_array_t assert assert proc~define->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~define~~CalledByGraph proc~define define interface~define define interface~define->proc~define Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/define.html"},{"title":"dx – Matcha","text":"module procedure dx pure module module function dx(self) result(my_dx) Interface → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: self Return Value real Called by proc~~dx~~CalledByGraph proc~dx dx interface~dx dx interface~dx->proc~dx Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dx.html"},{"title":"dy – Matcha","text":"module procedure dy pure module module function dy(self) result(my_dy) Interface → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: self Return Value real Called by proc~~dy~~CalledByGraph proc~dy dy interface~dy dy interface~dy->proc~dy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dy.html"},{"title":"laplacian – Matcha","text":"module procedure laplacian pure module module function laplacian(rhs) result(laplacian_rhs) Interface → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: rhs Return Value type( subdomain_t ) Calls proc~~laplacian~~CallsGraph proc~laplacian laplacian assert assert proc~laplacian->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~laplacian~~CalledByGraph proc~laplacian laplacian interface~laplacian laplacian interface~laplacian->proc~laplacian Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/laplacian.html"},{"title":"multiply – Matcha","text":"module procedure multiply pure module module function multiply(lhs, rhs) result(product) Interface → Arguments Type Intent Optional Attributes Name real, intent(in) :: lhs class( subdomain_t ), intent(in) :: rhs Return Value type( subdomain_t ) Calls proc~~multiply~~CallsGraph proc~multiply multiply assert assert proc~multiply->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~multiply~~CalledByGraph proc~multiply multiply interface~multiply multiply interface~multiply->proc~multiply Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/multiply.html"},{"title":"add – Matcha","text":"module procedure add pure module module function add(lhs, rhs) result(total) Interface → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: lhs type( subdomain_t ), intent(in) :: rhs Return Value type( subdomain_t ) Calls proc~~add~~CallsGraph proc~add add assert assert proc~add->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~add~~CalledByGraph proc~add add interface~add add interface~add->proc~add Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/add.html"},{"title":"assign_and_sync – Matcha","text":"module procedure assign_and_sync module module subroutine assign_and_sync(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(out) :: lhs type( subdomain_t ), intent(in) :: rhs Calls proc~~assign_and_sync~~CallsGraph proc~assign_and_sync assign_and_sync assert assert proc~assign_and_sync->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~assign_and_sync~~CalledByGraph proc~assign_and_sync assign_and_sync interface~assign_and_sync assign_and_sync interface~assign_and_sync->proc~assign_and_sync Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/assign_and_sync.html"},{"title":"values – Matcha","text":"module procedure values pure module module function values(self) result(my_values) Interface → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: self Return Value real,allocatable,(:,:) Calls proc~~values~~CallsGraph proc~values values assert assert proc~values->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~values~~CalledByGraph proc~values values interface~values values interface~values->proc~values Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/values.html"},{"title":"do_concurrent_sampled_speeds – Matcha","text":"module procedure do_concurrent_sampled_speeds pure module module subroutine do_concurrent_sampled_speeds(speeds, vel, cumulative_distribution, sampled_speeds) Interface → Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: speeds (:,:) real(kind=c_double), intent(in) :: vel (:) real(kind=c_double), intent(in) :: cumulative_distribution (:) real(kind=c_double), intent(out), allocatable :: sampled_speeds (:,:) Called by proc~~do_concurrent_sampled_speeds~~CalledByGraph proc~do_concurrent_sampled_speeds do_concurrent_sampled_speeds interface~do_concurrent_sampled_speeds do_concurrent_sampled_speeds interface~do_concurrent_sampled_speeds->proc~do_concurrent_sampled_speeds proc~velocities velocities proc~velocities->interface~do_concurrent_sampled_speeds interface~velocities velocities interface~velocities->proc~velocities Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/do_concurrent_sampled_speeds.html"},{"title":"do_concurrent_my_velocities – Matcha","text":"module procedure do_concurrent_my_velocities pure module module subroutine do_concurrent_my_velocities(nsteps, dir, sampled_speeds, my_velocities) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: nsteps real(kind=c_double), intent(in) :: dir (:,:,:) real(kind=c_double), intent(in) :: sampled_speeds (:,:) real(kind=c_double), intent(out), allocatable :: my_velocities (:,:,:) Called by proc~~do_concurrent_my_velocities~~CalledByGraph proc~do_concurrent_my_velocities do_concurrent_my_velocities interface~do_concurrent_my_velocities do_concurrent_my_velocities interface~do_concurrent_my_velocities->proc~do_concurrent_my_velocities proc~velocities velocities proc~velocities->interface~do_concurrent_my_velocities interface~velocities velocities interface~velocities->proc~velocities Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/do_concurrent_my_velocities.html"},{"title":"do_concurrent_k – Matcha","text":"module procedure do_concurrent_k pure module module subroutine do_concurrent_k(speeds, vel, k) Interface → Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: speeds (:) real(kind=c_double), intent(in) :: vel (:) integer(kind=c_int), intent(out), allocatable :: k (:) Called by proc~~do_concurrent_k~~CalledByGraph proc~do_concurrent_k do_concurrent_k interface~do_concurrent_k do_concurrent_k interface~do_concurrent_k->proc~do_concurrent_k proc~simulated_distribution simulated_distribution proc~simulated_distribution->interface~do_concurrent_k interface~simulated_distribution simulated_distribution interface~simulated_distribution->proc~simulated_distribution Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/do_concurrent_k.html"},{"title":"do_concurrent_output_distribution – Matcha","text":"module procedure do_concurrent_output_distribution pure module module subroutine do_concurrent_output_distribution(nintervals, speed, freq, emp_distribution, k, output_distribution) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: nintervals integer(kind=c_int), intent(in) :: speed integer(kind=c_int), intent(in) :: freq real(kind=c_double), intent(in) :: emp_distribution (:,:) integer(kind=c_int), intent(in) :: k (:) real(kind=c_double), intent(out), allocatable :: output_distribution (:,:) Called by proc~~do_concurrent_output_distribution~~CalledByGraph proc~do_concurrent_output_distribution do_concurrent_output_distribution interface~do_concurrent_output_distribution do_concurrent_output_distribution interface~do_concurrent_output_distribution->proc~do_concurrent_output_distribution proc~simulated_distribution simulated_distribution proc~simulated_distribution->interface~do_concurrent_output_distribution interface~simulated_distribution simulated_distribution interface~simulated_distribution->proc~simulated_distribution Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/do_concurrent_output_distribution.html"},{"title":"do_concurrent_speeds – Matcha","text":"module procedure do_concurrent_speeds module module subroutine do_concurrent_speeds(history, speeds) Interface → Arguments Type Intent Optional Attributes Name type( t_cell_collection_bind_C_t ), intent(in) :: history (:) real(kind=c_double), intent(out), allocatable :: speeds (:) Calls proc~~do_concurrent_speeds~~CallsGraph proc~do_concurrent_speeds do_concurrent_speeds u u proc~do_concurrent_speeds->u Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~do_concurrent_speeds~~CalledByGraph proc~do_concurrent_speeds do_concurrent_speeds interface~do_concurrent_speeds do_concurrent_speeds interface~do_concurrent_speeds->proc~do_concurrent_speeds proc~simulated_distribution simulated_distribution proc~simulated_distribution->interface~do_concurrent_speeds interface~simulated_distribution simulated_distribution interface~simulated_distribution->proc~simulated_distribution Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/do_concurrent_speeds.html"},{"title":"construct – Matcha","text":"module procedure construct module procedure construct() Arguments None Calls proc~~construct~~CallsGraph proc~construct construct sample_distribution sample_distribution proc~construct->sample_distribution proc~monotonically_increasing monotonically_increasing proc~construct->proc~monotonically_increasing assert assert proc~construct->assert intrinsic_array_t intrinsic_array_t proc~construct->intrinsic_array_t Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/construct.html"},{"title":"cumulative_distribution – Matcha","text":"module procedure cumulative_distribution pure module module function cumulative_distribution(self) result(my_cumulative_distribution) Interface → Arguments Type Intent Optional Attributes Name class( distribution_t ), intent(in) :: self Return Value double precision,allocatable,(:) Calls proc~~cumulative_distribution~~CallsGraph proc~cumulative_distribution cumulative_distribution assert assert proc~cumulative_distribution->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~cumulative_distribution~~CalledByGraph proc~cumulative_distribution cumulative_distribution interface~cumulative_distribution cumulative_distribution interface~cumulative_distribution->proc~cumulative_distribution Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/cumulative_distribution.html"},{"title":"velocities – Matcha","text":"module procedure velocities pure module module function velocities(self, speeds, directions) result(my_velocities) Interface → Arguments Type Intent Optional Attributes Name class( distribution_t ), intent(in) :: self double precision, intent(in) :: speeds (:,:) double precision, intent(in) :: directions (:,:,:) Return Value double precision,allocatable,(:,:,:) Calls proc~~velocities~~CallsGraph proc~velocities velocities assert assert proc~velocities->assert interface~do_concurrent_sampled_speeds do_concurrent_sampled_speeds proc~velocities->interface~do_concurrent_sampled_speeds interface~do_concurrent_my_velocities do_concurrent_my_velocities proc~velocities->interface~do_concurrent_my_velocities proc~do_concurrent_sampled_speeds do_concurrent_sampled_speeds interface~do_concurrent_sampled_speeds->proc~do_concurrent_sampled_speeds proc~do_concurrent_my_velocities do_concurrent_my_velocities interface~do_concurrent_my_velocities->proc~do_concurrent_my_velocities Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~velocities~~CalledByGraph proc~velocities velocities interface~velocities velocities interface~velocities->proc~velocities Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/velocities.html"},{"title":"construct – Matcha","text":"module procedure construct module procedure construct() Arguments None Contents None","tags":"","loc":"proc/construct~2.html"},{"title":"my_num_cells – Matcha","text":"module procedure my_num_cells pure module module function my_num_cells(self) result(num_cells) Interface → Arguments Type Intent Optional Attributes Name class( output_t ), intent(in) :: self Return Value integer Called by proc~~my_num_cells~~CalledByGraph proc~my_num_cells my_num_cells interface~my_num_cells my_num_cells interface~my_num_cells->proc~my_num_cells Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/my_num_cells.html"},{"title":"simulated_distribution – Matcha","text":"module procedure simulated_distribution module module function simulated_distribution(self) result(output_distribution) Interface → Arguments Type Intent Optional Attributes Name class( output_t ), intent(in) :: self Return Value double precision,allocatable,(:,:) Calls proc~~simulated_distribution~~CallsGraph proc~simulated_distribution simulated_distribution interface~do_concurrent_speeds do_concurrent_speeds proc~simulated_distribution->interface~do_concurrent_speeds interface~do_concurrent_output_distribution do_concurrent_output_distribution proc~simulated_distribution->interface~do_concurrent_output_distribution emp_distribution emp_distribution proc~simulated_distribution->emp_distribution interface~do_concurrent_k do_concurrent_k proc~simulated_distribution->interface~do_concurrent_k proc~do_concurrent_speeds do_concurrent_speeds interface~do_concurrent_speeds->proc~do_concurrent_speeds proc~do_concurrent_output_distribution do_concurrent_output_distribution interface~do_concurrent_output_distribution->proc~do_concurrent_output_distribution proc~do_concurrent_k do_concurrent_k interface~do_concurrent_k->proc~do_concurrent_k u u proc~do_concurrent_speeds->u Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~simulated_distribution~~CalledByGraph proc~simulated_distribution simulated_distribution interface~simulated_distribution simulated_distribution interface~simulated_distribution->proc~simulated_distribution Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/simulated_distribution.html"},{"title":"num_cells – Matcha","text":"module procedure num_cells pure module module function num_cells(self) result(n) Interface → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer Called by proc~~num_cells~~CalledByGraph proc~num_cells num_cells interface~num_cells num_cells interface~num_cells->proc~num_cells Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/num_cells.html"},{"title":"num_positions – Matcha","text":"module procedure num_positions pure module module function num_positions(self) result(n) Interface → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer Called by proc~~num_positions~~CalledByGraph proc~num_positions num_positions interface~num_positions num_positions interface~num_positions->proc~num_positions Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/num_positions.html"},{"title":"num_dimensions – Matcha","text":"module procedure num_dimensions pure module module function num_dimensions(self) result(n) Interface → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer Called by proc~~num_dimensions~~CalledByGraph proc~num_dimensions num_dimensions interface~num_dimensions num_dimensions interface~num_dimensions->proc~num_dimensions Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/num_dimensions.html"},{"title":"num_intervals – Matcha","text":"module procedure num_intervals pure module module function num_intervals(self) result(n) Interface → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer Called by proc~~num_intervals~~CalledByGraph proc~num_intervals num_intervals interface~num_intervals num_intervals interface~num_intervals->proc~num_intervals Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/num_intervals.html"},{"title":"time_step – Matcha","text":"module procedure time_step pure module module function time_step(self) result(dt) Interface → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value double precision Called by proc~~time_step~~CalledByGraph proc~time_step time_step interface~time_step time_step interface~time_step->proc~time_step Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/time_step.html"},{"title":"sample_distribution – Matcha","text":"module procedure sample_distribution pure module module function sample_distribution(self) result(empirical_distribution) Interface → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value double precision,allocatable,(:,:) Called by proc~~sample_distribution~~CalledByGraph proc~sample_distribution sample_distribution interface~sample_distribution sample_distribution interface~sample_distribution->proc~sample_distribution Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/sample_distribution.html"},{"title":"construct – Matcha","text":"module procedure construct module procedure construct() Arguments None Contents None","tags":"","loc":"proc/construct~3.html"},{"title":"positions – Matcha","text":"module procedure positions pure module module function positions(self) result(my_positions) Interface → Arguments Type Intent Optional Attributes Name class( t_cell_collection_t ), intent(in) :: self Return Value double precision,allocatable,(:,:) Calls proc~~positions~~CallsGraph proc~positions positions assert assert proc~positions->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~positions~~CalledByGraph proc~positions positions interface~positions positions interface~positions->proc~positions Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/positions.html"},{"title":"time – Matcha","text":"module procedure time elemental module module function time(self) result(my_time) Interface → Arguments Type Intent Optional Attributes Name class( t_cell_collection_t ), intent(in) :: self Return Value double precision Called by proc~~time~~CalledByGraph proc~time time interface~time time interface~time->proc~time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/time.html"},{"title":"construct_bind_C – Matcha","text":"module procedure construct_bind_C module procedure construct_bind_C() Arguments None Contents None","tags":"","loc":"proc/construct_bind_c.html"},{"title":"matcha_m – Matcha","text":"Uses output_m distribution_m data_partition_m t_cell_collection_m input_m subdomain_m module~~matcha_m~~UsesGraph module~matcha_m matcha_m module~distribution_m distribution_m module~matcha_m->module~distribution_m module~output_m output_m module~matcha_m->module~output_m data_partition_m data_partition_m module~matcha_m->data_partition_m module~input_m input_m module~matcha_m->module~input_m module~t_cell_collection_m t_cell_collection_m module~matcha_m->module~t_cell_collection_m module~subdomain_m subdomain_m module~matcha_m->module~subdomain_m module~output_m->module~input_m module~output_m->module~t_cell_collection_m module~t_cell_collection_m->module~distribution_m iso_c_binding iso_c_binding module~t_cell_collection_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by Descendants: matcha_s module~~matcha_m~~UsedByGraph module~matcha_m matcha_m program~main main program~main->module~matcha_m module~matcha_s matcha_s module~matcha_s->module~matcha_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Interfaces matcha Interfaces interface public module module function matcha(input) result(history) Implementation → Arguments Type Intent Optional Attributes Name type( input_t ), intent(in) :: input Return Value type( t_cell_collection_t ),allocatable, (:)","tags":"","loc":"module/matcha_m.html"},{"title":"input_m – Matcha","text":"Used by Descendants: input_s module~~input_m~~UsedByGraph module~input_m input_m module~output_m output_m module~output_m->module~input_m module~matcha_m matcha_m module~matcha_m->module~input_m module~matcha_m->module~output_m module~input_s input_s module~input_s->module~input_m module~output_s output_s module~output_s->module~output_m program~main main program~main->module~matcha_m module~matcha_s matcha_s module~matcha_s->module~matcha_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Interfaces num_cells num_positions num_dimensions num_intervals time_step sample_distribution Derived Types input_t Interfaces interface private pure module module function num_cells(self) result(n) Implementation → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer interface private pure module module function num_positions(self) result(n) Implementation → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer interface private pure module module function num_dimensions(self) result(n) Implementation → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer interface private pure module module function num_intervals(self) result(n) Implementation → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer interface private pure module module function time_step(self) result(dt) Implementation → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value double precision interface private pure module module function sample_distribution(self) result(empirical_distribution) Implementation → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value double precision,allocatable, (:,:) Derived Types type, public :: input_t Components Type Visibility Attributes Name Initial integer, private :: num_cells_ = 6000 integer, private :: num_positions_ = 6000 integer, private :: num_dimensions_ = 3 integer, private :: num_intervals_ = 4 double precision, private :: time_step_ = 0.1D0 Type-Bound Procedures procedure, public :: num_cells procedure, public :: num_positions procedure, public :: num_dimensions procedure, public :: num_intervals procedure, public :: time_step procedure, public :: sample_distribution","tags":"","loc":"module/input_m.html"},{"title":"do_concurrent_m – Matcha","text":"Uses iso_c_binding t_cell_collection_m module~~do_concurrent_m~~UsesGraph module~do_concurrent_m do_concurrent_m iso_c_binding iso_c_binding module~do_concurrent_m->iso_c_binding module~t_cell_collection_m t_cell_collection_m module~do_concurrent_m->module~t_cell_collection_m module~t_cell_collection_m->iso_c_binding module~distribution_m distribution_m module~t_cell_collection_m->module~distribution_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by Descendants: do_concurrent_s module~~do_concurrent_m~~UsedByGraph module~do_concurrent_m do_concurrent_m module~distribution_s distribution_s module~distribution_s->module~do_concurrent_m module~do_concurrent_s do_concurrent_s module~do_concurrent_s->module~do_concurrent_m module~output_s output_s module~output_s->module~do_concurrent_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Interfaces do_concurrent_sampled_speeds do_concurrent_my_velocities do_concurrent_k do_concurrent_output_distribution do_concurrent_speeds Interfaces interface public pure module module subroutine do_concurrent_sampled_speeds(speeds, vel, cumulative_distribution, sampled_speeds) bind(C) Implementation → Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: speeds (:,:) real(kind=c_double), intent(in) :: vel (:) real(kind=c_double), intent(in) :: cumulative_distribution (:) real(kind=c_double), intent(out), allocatable :: sampled_speeds (:,:) interface public pure module module subroutine do_concurrent_my_velocities(nsteps, dir, sampled_speeds, my_velocities) bind(C) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: nsteps real(kind=c_double), intent(in) :: dir (:,:,:) real(kind=c_double), intent(in) :: sampled_speeds (:,:) real(kind=c_double), intent(out), allocatable :: my_velocities (:,:,:) interface public pure module module subroutine do_concurrent_k(speeds, vel, k) bind(C) Implementation → Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: speeds (:) real(kind=c_double), intent(in) :: vel (:) integer(kind=c_int), intent(out), allocatable :: k (:) interface public pure module module subroutine do_concurrent_output_distribution(nintervals, speed, freq, emp_distribution, k, output_distribution) bind(C) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: nintervals integer(kind=c_int), intent(in) :: speed integer(kind=c_int), intent(in) :: freq real(kind=c_double), intent(in) :: emp_distribution (:,:) integer(kind=c_int), intent(in) :: k (:) real(kind=c_double), intent(out), allocatable :: output_distribution (:,:) interface public module module subroutine do_concurrent_speeds(history, speeds) bind(C) Implementation → Arguments Type Intent Optional Attributes Name type( t_cell_collection_bind_C_t ), intent(in) :: history (:) real(kind=c_double), intent(out), allocatable :: speeds (:)","tags":"","loc":"module/do_concurrent_m.html"},{"title":"output_m – Matcha","text":"Output data abstraction Uses input_m t_cell_collection_m module~~output_m~~UsesGraph module~output_m output_m module~input_m input_m module~output_m->module~input_m module~t_cell_collection_m t_cell_collection_m module~output_m->module~t_cell_collection_m iso_c_binding iso_c_binding module~t_cell_collection_m->iso_c_binding module~distribution_m distribution_m module~t_cell_collection_m->module~distribution_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by Descendants: output_s module~~output_m~~UsedByGraph module~output_m output_m module~matcha_m matcha_m module~matcha_m->module~output_m module~output_s output_s module~output_s->module~output_m program~main main program~main->module~matcha_m module~matcha_s matcha_s module~matcha_s->module~matcha_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Interfaces output_t simulated_distribution my_num_cells Derived Types output_t Interfaces public interface output_t private pure module function construct(input, history) result(output) Construct a new output_t object Arguments Type Intent Optional Attributes Name type( input_t ), intent(in) :: input type( t_cell_collection_t ), intent(in) :: history (:) Return Value type( output_t ) interface private module module function simulated_distribution(self) result(output_distribution) Implementation → The result is a histogram calculated from the simulation output Arguments Type Intent Optional Attributes Name class( output_t ), intent(in) :: self Return Value double precision,allocatable, (:,:) interface private pure module module function my_num_cells(self) result(num_cells) Implementation → Arguments Type Intent Optional Attributes Name class( output_t ), intent(in) :: self Return Value integer Derived Types type, public :: output_t Encapsulate an input/result pair Components Type Visibility Attributes Name Initial type( input_t ), private :: input_ type( t_cell_collection_t ), private, allocatable :: history_ (:) Constructor private pure,module function construct (input, history) Construct a new output_t object Type-Bound Procedures procedure, public :: simulated_distribution procedure, public :: my_num_cells","tags":"","loc":"module/output_m.html"},{"title":"t_cell_collection_m – Matcha","text":"Define a T-cell abstraction for motility simulations Uses iso_c_binding distribution_m module~~t_cell_collection_m~~UsesGraph module~t_cell_collection_m t_cell_collection_m iso_c_binding iso_c_binding module~t_cell_collection_m->iso_c_binding module~distribution_m distribution_m module~t_cell_collection_m->module~distribution_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by Descendants: t_cell_collection_s module~~t_cell_collection_m~~UsedByGraph module~t_cell_collection_m t_cell_collection_m module~matcha_m matcha_m module~matcha_m->module~t_cell_collection_m module~output_m output_m module~matcha_m->module~output_m module~do_concurrent_m do_concurrent_m module~do_concurrent_m->module~t_cell_collection_m module~output_m->module~t_cell_collection_m module~matcha_s matcha_s module~matcha_s->module~t_cell_collection_m module~matcha_s->module~matcha_m module~output_s output_s module~output_s->module~t_cell_collection_m module~output_s->module~do_concurrent_m module~output_s->module~output_m module~t_cell_collection_s t_cell_collection_s module~t_cell_collection_s->module~t_cell_collection_m program~main main program~main->module~matcha_m module~distribution_s distribution_s module~distribution_s->module~do_concurrent_m module~do_concurrent_s do_concurrent_s module~do_concurrent_s->module~do_concurrent_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Variables positions_dimension Interfaces t_cell_collection_t t_cell_collection_bind_C_t positions time Derived Types t_cell_collection_t t_cell_collection_bind_C_t Variables Type Visibility Attributes Name Initial integer, private, parameter :: positions_dimension = 2 Interfaces public interface t_cell_collection_t private pure module function construct(positions, time) result(t_cell_collection) Return a t_cell_collection_t object with rescaled position vectors and the provided time stamp Arguments Type Intent Optional Attributes Name double precision, intent(in) :: positions (:,:) double precision, intent(in) :: time Return Value type( t_cell_collection_t ) public interface t_cell_collection_bind_C_t private elemental module function construct_bind_C(t_cell_collection) result(t_cell_collection_bind_C) Result is bind(C) representation of the data inside a t_cell_collection_t object Arguments Type Intent Optional Attributes Name type( t_cell_collection_t ), intent(in), target :: t_cell_collection Return Value type( t_cell_collection_bind_C_t ) interface private pure module module function positions(self) result(my_positions) Implementation → Return the t_cell_collection_t object's position vectors Arguments Type Intent Optional Attributes Name class( t_cell_collection_t ), intent(in) :: self Return Value double precision,allocatable, (:,:) interface private elemental module module function time(self) result(my_time) Implementation → Return the t_cell_collection_t object's time stamp Arguments Type Intent Optional Attributes Name class( t_cell_collection_t ), intent(in) :: self Return Value double precision Derived Types type, public :: t_cell_collection_t Encapsulate the state of a collection of T cells Components Type Visibility Attributes Name Initial double precision, private, allocatable :: positions_ (:,:) position vectors double precision, private :: time_ time stamp Constructor private pure,module function construct (positions, time) Return a t_cell_collection_t object with rescaled position vectors and the provided time stamp Type-Bound Procedures procedure, public :: positions procedure, public :: time type, public, bind(C) :: t_cell_collection_bind_C_t Components Type Visibility Attributes Name Initial type(c_ptr), private :: positions_ptr integer(kind=c_int), private :: positions_shape (positions_dimension) real(kind=c_double), private :: time Constructor private elemental,module function construct_bind_C (t_cell_collection) Result is bind(C) representation of the data inside a t_cell_collection_t object","tags":"","loc":"module/t_cell_collection_m.html"},{"title":"subdomain_m – Matcha","text":"Used by Descendants: subdomain_s module~~subdomain_m~~UsedByGraph module~subdomain_m subdomain_m module~matcha_m matcha_m module~matcha_m->module~subdomain_m module~subdomain_s subdomain_s module~subdomain_s->module~subdomain_m program~main main program~main->module~matcha_m module~matcha_s matcha_s module~matcha_s->module~matcha_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Interfaces values dx dy laplacian multiply add define assign_and_sync Derived Types subdomain_t Interfaces interface private pure module module function values(self) result(my_values) Implementation → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: self Return Value real,allocatable, (:,:) interface private pure module module function dx(self) result(my_dx) Implementation → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: self Return Value real interface private pure module module function dy(self) result(my_dy) Implementation → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: self Return Value real interface private pure module module function laplacian(rhs) result(laplacian_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: rhs Return Value type( subdomain_t ) interface private pure module module function multiply(lhs, rhs) result(product) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: lhs class( subdomain_t ), intent(in) :: rhs Return Value type( subdomain_t ) interface private pure module module function add(lhs, rhs) result(total) Implementation → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: lhs type( subdomain_t ), intent(in) :: rhs Return Value type( subdomain_t ) interface private module module subroutine define(side, boundary_val, internal_val, n, self) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: side real, intent(in) :: boundary_val real, intent(in) :: internal_val integer, intent(in) :: n number of grid points in each coordinate direction class( subdomain_t ), intent(out) :: self interface private module module subroutine assign_and_sync(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(out) :: lhs type( subdomain_t ), intent(in) :: rhs Derived Types type, public :: subdomain_t Components Type Visibility Attributes Name Initial real, private, allocatable :: s_ (:,:) procedure, public :: dx procedure, public :: dy procedure, public :: values Type-Bound Procedures procedure, public, pass(self) :: define procedure, public :: laplacian generic, public :: operator(.laplacian.) => laplacian procedure, public, pass(rhs) :: multiply generic, public :: operator(*) => multiply procedure, public :: add generic, public :: operator(+) => add procedure, public :: assign_and_sync generic, public :: assignment(=) => assign_and_sync","tags":"","loc":"module/subdomain_m.html"},{"title":"distribution_m – Matcha","text":"Used by Descendants: distribution_s module~~distribution_m~~UsedByGraph module~distribution_m distribution_m module~t_cell_collection_m t_cell_collection_m module~t_cell_collection_m->module~distribution_m module~matcha_m matcha_m module~matcha_m->module~distribution_m module~matcha_m->module~t_cell_collection_m module~output_m output_m module~matcha_m->module~output_m module~matcha_s matcha_s module~matcha_s->module~distribution_m module~matcha_s->module~t_cell_collection_m module~matcha_s->module~matcha_m module~distribution_s distribution_s module~distribution_s->module~distribution_m module~do_concurrent_m do_concurrent_m module~distribution_s->module~do_concurrent_m module~do_concurrent_m->module~t_cell_collection_m module~output_m->module~t_cell_collection_m module~t_cell_collection_s t_cell_collection_s module~t_cell_collection_s->module~t_cell_collection_m program~main main program~main->module~matcha_m module~output_s output_s module~output_s->module~t_cell_collection_m module~output_s->module~do_concurrent_m module~output_s->module~output_m module~do_concurrent_s do_concurrent_s module~do_concurrent_s->module~do_concurrent_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Interfaces distribution_t cumulative_distribution velocities Derived Types distribution_t Interfaces public interface distribution_t private pure module function construct(sample_distribution) result(distribution) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: sample_distribution (:,:) Return Value type( distribution_t ) interface private pure module module function cumulative_distribution(self) result(my_cumulative_distribution) Implementation → Arguments Type Intent Optional Attributes Name class( distribution_t ), intent(in) :: self Return Value double precision,allocatable, (:) interface private pure module module function velocities(self, speeds, directions) result(my_velocities) Implementation → Return the t_cell_collection_t object's velocity vectors Arguments Type Intent Optional Attributes Name class( distribution_t ), intent(in) :: self double precision, intent(in) :: speeds (:,:) double precision, intent(in) :: directions (:,:,:) Return Value double precision,allocatable, (:,:,:) Derived Types type, public :: distribution_t Components Type Visibility Attributes Name Initial double precision, private, allocatable, dimension(:) :: vel_ double precision, private, allocatable, dimension(:) :: cumulative_distribution_ Constructor private pure,module function construct (sample_distribution) Type-Bound Procedures procedure, public :: cumulative_distribution procedure, public :: velocities","tags":"","loc":"module/distribution_m.html"},{"title":"matcha_s – Matcha","text":"Uses data_partition_m distribution_m t_cell_collection_m Ancestors: matcha_m module~~matcha_s~~UsesGraph module~matcha_s matcha_s data_partition_m data_partition_m module~matcha_s->data_partition_m module~t_cell_collection_m t_cell_collection_m module~matcha_s->module~t_cell_collection_m module~distribution_m distribution_m module~matcha_s->module~distribution_m module~matcha_m matcha_m module~matcha_s->module~matcha_m module~t_cell_collection_m->module~distribution_m iso_c_binding iso_c_binding module~t_cell_collection_m->iso_c_binding module~matcha_m->data_partition_m module~matcha_m->module~t_cell_collection_m module~matcha_m->module~distribution_m module~output_m output_m module~matcha_m->module~output_m module~subdomain_m subdomain_m module~matcha_m->module~subdomain_m module~input_m input_m module~matcha_m->module~input_m module~output_m->module~t_cell_collection_m module~output_m->module~input_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures matcha Module Procedures module procedure matcha module module function matcha(input) result(history) Interface → Arguments Type Intent Optional Attributes Name type( input_t ), intent(in) :: input Return Value type( t_cell_collection_t ),allocatable, (:)","tags":"","loc":"module/matcha_s.html"},{"title":"subdomain_s – Matcha","text":"Uses assert_m intrinsic_array_m data_partition_m Ancestors: subdomain_m module~~subdomain_s~~UsesGraph module~subdomain_s subdomain_s assert_m assert_m module~subdomain_s->assert_m data_partition_m data_partition_m module~subdomain_s->data_partition_m module~subdomain_m subdomain_m module~subdomain_s->module~subdomain_m intrinsic_array_m intrinsic_array_m module~subdomain_s->intrinsic_array_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Variables halo_x west east data_partition dx_ dy_ my_nx nx ny me num_subdomains my_internal_left my_internal_right Module Procedures define dx dy laplacian multiply add assign_and_sync values Variables Type Visibility Attributes Name Initial real, private, allocatable :: halo_x (:,:)[:] integer, private, parameter :: west = 1 integer, private, parameter :: east = 2 type(data_partition_t), private :: data_partition real, private :: dx_ real, private :: dy_ integer, private :: my_nx integer, private :: nx integer, private :: ny integer, private :: me integer, private :: num_subdomains integer, private :: my_internal_left integer, private :: my_internal_right Module Procedures module procedure define module module subroutine define(side, boundary_val, internal_val, n, self) Interface → Arguments Type Intent Optional Attributes Name real, intent(in) :: side real, intent(in) :: boundary_val real, intent(in) :: internal_val integer, intent(in) :: n number of grid points in each coordinate direction class( subdomain_t ), intent(out) :: self module procedure dx pure module module function dx(self) result(my_dx) Interface → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: self Return Value real module procedure dy pure module module function dy(self) result(my_dy) Interface → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: self Return Value real module procedure laplacian pure module module function laplacian(rhs) result(laplacian_rhs) Interface → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: rhs Return Value type( subdomain_t ) module procedure multiply pure module module function multiply(lhs, rhs) result(product) Interface → Arguments Type Intent Optional Attributes Name real, intent(in) :: lhs class( subdomain_t ), intent(in) :: rhs Return Value type( subdomain_t ) module procedure add pure module module function add(lhs, rhs) result(total) Interface → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: lhs type( subdomain_t ), intent(in) :: rhs Return Value type( subdomain_t ) module procedure assign_and_sync module module subroutine assign_and_sync(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(out) :: lhs type( subdomain_t ), intent(in) :: rhs module procedure values pure module module function values(self) result(my_values) Interface → Arguments Type Intent Optional Attributes Name class( subdomain_t ), intent(in) :: self Return Value real,allocatable, (:,:)","tags":"","loc":"module/subdomain_s.html"},{"title":"do_concurrent_s – Matcha","text":"Uses iso_c_binding Ancestors: do_concurrent_m module~~do_concurrent_s~~UsesGraph module~do_concurrent_s do_concurrent_s iso_c_binding iso_c_binding module~do_concurrent_s->iso_c_binding module~do_concurrent_m do_concurrent_m module~do_concurrent_s->module~do_concurrent_m module~do_concurrent_m->iso_c_binding module~t_cell_collection_m t_cell_collection_m module~do_concurrent_m->module~t_cell_collection_m module~t_cell_collection_m->iso_c_binding module~distribution_m distribution_m module~t_cell_collection_m->module~distribution_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures do_concurrent_sampled_speeds do_concurrent_my_velocities do_concurrent_k do_concurrent_output_distribution do_concurrent_speeds Module Procedures module procedure do_concurrent_sampled_speeds pure module module subroutine do_concurrent_sampled_speeds(speeds, vel, cumulative_distribution, sampled_speeds) Interface → Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: speeds (:,:) real(kind=c_double), intent(in) :: vel (:) real(kind=c_double), intent(in) :: cumulative_distribution (:) real(kind=c_double), intent(out), allocatable :: sampled_speeds (:,:) module procedure do_concurrent_my_velocities pure module module subroutine do_concurrent_my_velocities(nsteps, dir, sampled_speeds, my_velocities) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: nsteps real(kind=c_double), intent(in) :: dir (:,:,:) real(kind=c_double), intent(in) :: sampled_speeds (:,:) real(kind=c_double), intent(out), allocatable :: my_velocities (:,:,:) module procedure do_concurrent_k pure module module subroutine do_concurrent_k(speeds, vel, k) Interface → Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: speeds (:) real(kind=c_double), intent(in) :: vel (:) integer(kind=c_int), intent(out), allocatable :: k (:) module procedure do_concurrent_output_distribution pure module module subroutine do_concurrent_output_distribution(nintervals, speed, freq, emp_distribution, k, output_distribution) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: nintervals integer(kind=c_int), intent(in) :: speed integer(kind=c_int), intent(in) :: freq real(kind=c_double), intent(in) :: emp_distribution (:,:) integer(kind=c_int), intent(in) :: k (:) real(kind=c_double), intent(out), allocatable :: output_distribution (:,:) module procedure do_concurrent_speeds module module subroutine do_concurrent_speeds(history, speeds) Interface → Arguments Type Intent Optional Attributes Name type( t_cell_collection_bind_C_t ), intent(in) :: history (:) real(kind=c_double), intent(out), allocatable :: speeds (:)","tags":"","loc":"module/do_concurrent_s.html"},{"title":"distribution_s – Matcha","text":"Uses intrinsic_array_m assert_m do_concurrent_m Ancestors: distribution_m module~~distribution_s~~UsesGraph module~distribution_s distribution_s intrinsic_array_m intrinsic_array_m module~distribution_s->intrinsic_array_m assert_m assert_m module~distribution_s->assert_m module~do_concurrent_m do_concurrent_m module~distribution_s->module~do_concurrent_m module~distribution_m distribution_m module~distribution_s->module~distribution_m iso_c_binding iso_c_binding module~do_concurrent_m->iso_c_binding module~t_cell_collection_m t_cell_collection_m module~do_concurrent_m->module~t_cell_collection_m module~t_cell_collection_m->module~distribution_m module~t_cell_collection_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Functions monotonically_increasing Module Procedures construct cumulative_distribution velocities Functions pure function monotonically_increasing (f) result(monotonic) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: f (:) Return Value logical Module Procedures module procedure construct module procedure construct() Arguments None module procedure cumulative_distribution pure module module function cumulative_distribution(self) result(my_cumulative_distribution) Interface → Arguments Type Intent Optional Attributes Name class( distribution_t ), intent(in) :: self Return Value double precision,allocatable, (:) module procedure velocities pure module module function velocities(self, speeds, directions) result(my_velocities) Interface → Arguments Type Intent Optional Attributes Name class( distribution_t ), intent(in) :: self double precision, intent(in) :: speeds (:,:) double precision, intent(in) :: directions (:,:,:) Return Value double precision,allocatable, (:,:,:)","tags":"","loc":"module/distribution_s.html"},{"title":"output_s – Matcha","text":"Uses do_concurrent_m t_cell_collection_m iso_c_binding Ancestors: output_m module~~output_s~~UsesGraph module~output_s output_s module~do_concurrent_m do_concurrent_m module~output_s->module~do_concurrent_m module~output_m output_m module~output_s->module~output_m module~t_cell_collection_m t_cell_collection_m module~output_s->module~t_cell_collection_m iso_c_binding iso_c_binding module~output_s->iso_c_binding module~do_concurrent_m->module~t_cell_collection_m module~do_concurrent_m->iso_c_binding module~output_m->module~t_cell_collection_m module~input_m input_m module~output_m->module~input_m module~t_cell_collection_m->iso_c_binding module~distribution_m distribution_m module~t_cell_collection_m->module~distribution_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures construct my_num_cells simulated_distribution Module Procedures module procedure construct module procedure construct() Arguments None module procedure my_num_cells pure module module function my_num_cells(self) result(num_cells) Interface → Arguments Type Intent Optional Attributes Name class( output_t ), intent(in) :: self Return Value integer module procedure simulated_distribution module module function simulated_distribution(self) result(output_distribution) Interface → Arguments Type Intent Optional Attributes Name class( output_t ), intent(in) :: self Return Value double precision,allocatable, (:,:)","tags":"","loc":"module/output_s.html"},{"title":"input_s – Matcha","text":"Uses Ancestors: input_m module~~input_s~~UsesGraph module~input_s input_s module~input_m input_m module~input_s->module~input_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures num_cells num_positions num_dimensions num_intervals time_step sample_distribution Module Procedures module procedure num_cells pure module module function num_cells(self) result(n) Interface → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer module procedure num_positions pure module module function num_positions(self) result(n) Interface → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer module procedure num_dimensions pure module module function num_dimensions(self) result(n) Interface → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer module procedure num_intervals pure module module function num_intervals(self) result(n) Interface → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value integer module procedure time_step pure module module function time_step(self) result(dt) Interface → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value double precision module procedure sample_distribution pure module module function sample_distribution(self) result(empirical_distribution) Interface → Arguments Type Intent Optional Attributes Name class( input_t ), intent(in) :: self Return Value double precision,allocatable, (:,:)","tags":"","loc":"module/input_s.html"},{"title":"t_cell_collection_s – Matcha","text":"Uses assert_m iso_c_binding Ancestors: t_cell_collection_m module~~t_cell_collection_s~~UsesGraph module~t_cell_collection_s t_cell_collection_s assert_m assert_m module~t_cell_collection_s->assert_m module~t_cell_collection_m t_cell_collection_m module~t_cell_collection_s->module~t_cell_collection_m iso_c_binding iso_c_binding module~t_cell_collection_s->iso_c_binding module~t_cell_collection_m->iso_c_binding module~distribution_m distribution_m module~t_cell_collection_m->module~distribution_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Module Procedures construct positions time construct_bind_C Module Procedures module procedure construct module procedure construct() Arguments None module procedure positions pure module module function positions(self) result(my_positions) Interface → Arguments Type Intent Optional Attributes Name class( t_cell_collection_t ), intent(in) :: self Return Value double precision,allocatable, (:,:) module procedure time elemental module module function time(self) result(my_time) Interface → Arguments Type Intent Optional Attributes Name class( t_cell_collection_t ), intent(in) :: self Return Value double precision module procedure construct_bind_C module procedure construct_bind_C() Arguments None","tags":"","loc":"module/t_cell_collection_s.html"},{"title":"main – Matcha","text":"Uses matcha_m program~~main~~UsesGraph program~main main module~matcha_m matcha_m program~main->module~matcha_m module~distribution_m distribution_m module~matcha_m->module~distribution_m module~output_m output_m module~matcha_m->module~output_m data_partition_m data_partition_m module~matcha_m->data_partition_m module~input_m input_m module~matcha_m->module~input_m module~t_cell_collection_m t_cell_collection_m module~matcha_m->module~t_cell_collection_m module~subdomain_m subdomain_m module~matcha_m->module~subdomain_m module~output_m->module~input_m module~output_m->module~t_cell_collection_m module~t_cell_collection_m->module~distribution_m iso_c_binding iso_c_binding module~t_cell_collection_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Matcha: Motility Analysis of T-Cell Histories in Activation Calls program~~main~~CallsGraph program~main main interface~matcha matcha program~main->interface~matcha simulated_distribution simulated_distribution program~main->simulated_distribution proc~matcha matcha interface~matcha->proc~matcha random_positions random_positions proc~matcha->random_positions v v proc~matcha->v random_4vectors random_4vectors proc~matcha->random_4vectors random_init random_init proc~matcha->random_init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables output Variables Type Attributes Name Initial type( output_t ) :: output","tags":"","loc":"program/main.html"},{"title":"matcha_m.f90 – Matcha","text":"This file depends on sourcefile~~matcha_m.f90~~EfferentGraph sourcefile~matcha_m.f90 matcha_m.f90 sourcefile~t_cell_collection_m.f90 t_cell_collection_m.f90 sourcefile~matcha_m.f90->sourcefile~t_cell_collection_m.f90 sourcefile~subdomain_m.f90 subdomain_m.f90 sourcefile~matcha_m.f90->sourcefile~subdomain_m.f90 sourcefile~input_m.f90 input_m.f90 sourcefile~matcha_m.f90->sourcefile~input_m.f90 sourcefile~distribution_m.f90 distribution_m.f90 sourcefile~matcha_m.f90->sourcefile~distribution_m.f90 sourcefile~output_m.f90 output_m.f90 sourcefile~matcha_m.f90->sourcefile~output_m.f90 sourcefile~t_cell_collection_m.f90->sourcefile~distribution_m.f90 sourcefile~output_m.f90->sourcefile~t_cell_collection_m.f90 sourcefile~output_m.f90->sourcefile~input_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Files dependent on this one sourcefile~~matcha_m.f90~~AfferentGraph sourcefile~matcha_m.f90 matcha_m.f90 sourcefile~matcha_s.f90 matcha_s.F90 sourcefile~matcha_s.f90->sourcefile~matcha_m.f90 sourcefile~main.f90 main.F90 sourcefile~main.f90->sourcefile~matcha_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules matcha_m Source Code matcha_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module matcha_m use t_cell_collection_m , only : t_cell_collection_t use distribution_m , only : distribution_t use input_m , only : input_t use output_m , only : output_t use data_partition_m , only : data_partition_t use subdomain_m , only : subdomain_t implicit none interface module function matcha ( input ) result ( history ) implicit none type ( input_t ), intent ( in ) :: input type ( t_cell_collection_t ), allocatable :: history (:) end function end interface end module","tags":"","loc":"sourcefile/matcha_m.f90.html"},{"title":"matcha_s.F90 – Matcha","text":"This file depends on sourcefile~~matcha_s.f90~~EfferentGraph sourcefile~matcha_s.f90 matcha_s.F90 sourcefile~matcha_m.f90 matcha_m.f90 sourcefile~matcha_s.f90->sourcefile~matcha_m.f90 sourcefile~distribution_m.f90 distribution_m.f90 sourcefile~matcha_s.f90->sourcefile~distribution_m.f90 sourcefile~t_cell_collection_m.f90 t_cell_collection_m.f90 sourcefile~matcha_s.f90->sourcefile~t_cell_collection_m.f90 sourcefile~matcha_m.f90->sourcefile~distribution_m.f90 sourcefile~matcha_m.f90->sourcefile~t_cell_collection_m.f90 sourcefile~subdomain_m.f90 subdomain_m.f90 sourcefile~matcha_m.f90->sourcefile~subdomain_m.f90 sourcefile~output_m.f90 output_m.f90 sourcefile~matcha_m.f90->sourcefile~output_m.f90 sourcefile~input_m.f90 input_m.f90 sourcefile~matcha_m.f90->sourcefile~input_m.f90 sourcefile~t_cell_collection_m.f90->sourcefile~distribution_m.f90 sourcefile~output_m.f90->sourcefile~t_cell_collection_m.f90 sourcefile~output_m.f90->sourcefile~input_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules matcha_s Source Code matcha_s.F90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( matcha_m ) matcha_s use t_cell_collection_m , only : t_cell_collection_t use distribution_m , only : distribution_t use data_partition_m , only : data_partition_t implicit none contains module procedure matcha associate ( & ncells => input % num_cells (), & npositions => input % num_positions (), & ndim => input % num_dimensions (), & nintervals => input % num_intervals (), & dt => input % time_step (), & empirical_distribution => input % sample_distribution () & ) block double precision , parameter :: scale = 10 0.D0 double precision , allocatable :: random_positions (:,:), random_4vectors (:,:,:) type ( distribution_t ) distribution integer , parameter :: nveldim = 4 integer step type ( data_partition_t ) data_partition call data_partition % define_partitions ( cardinality = ncells ) associate ( me => this_image ()) associate ( my_num_cells => data_partition % last ( me ) - data_partition % first ( me ) + 1 ) call random_init ( repeatable = . true ., image_distinct = . true .) allocate ( random_positions ( my_num_cells , ndim )) call random_number ( random_positions ) associate ( nsteps => npositions - 1 ) allocate ( random_4vectors ( my_num_cells , nsteps , nveldim )) call random_number ( random_4vectors ) distribution = distribution_t ( empirical_distribution ) associate ( random_speeds => random_4vectors (:,:, 1 ), random_directions => random_4vectors (:,:, 2 : 4 )) associate ( v => distribution % velocities ( random_speeds , random_directions )) allocate ( history ( nsteps )) history ( 1 ) = t_cell_collection_t ( scale * random_positions , time = 0.D0 ) do step = 2 , nsteps associate ( x => history ( step - 1 )% positions (), t => history ( step - 1 )% time ()) history ( step ) = t_cell_collection_t ( x + v (:, step - 1 ,:) * dt , t + dt ) end associate end do end associate end associate end associate end associate end associate end block end associate end procedure end submodule matcha_s","tags":"","loc":"sourcefile/matcha_s.f90.html"},{"title":"subdomain_s.f90 – Matcha","text":"This file depends on sourcefile~~subdomain_s.f90~~EfferentGraph sourcefile~subdomain_s.f90 subdomain_s.f90 sourcefile~subdomain_m.f90 subdomain_m.f90 sourcefile~subdomain_s.f90->sourcefile~subdomain_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules subdomain_s Source Code subdomain_s.f90 Source Code submodule ( subdomain_m ) subdomain_s use data_partition_m , only : data_partition_t use assert_m , only : assert use intrinsic_array_m , only : intrinsic_array_t implicit none real , allocatable :: halo_x (:,:)[:] integer , parameter :: west = 1 , east = 2 type ( data_partition_t ) data_partition real dx_ , dy_ integer my_nx , nx , ny , me , num_subdomains , my_internal_left , my_internal_right contains module procedure define integer , parameter :: nx_boundaries = 2 nx = n ny = nx dx_ = side / ( nx - 1 ) dy_ = dx_ call assert ( num_subdomains <= nx - nx_boundaries , & \"subdomain_t%define: num_subdomains <= nx-nx_boundaries\" , intrinsic_array_t ([ nx , num_subdomains ])) me = this_image () num_subdomains = num_images () call data_partition % define_partitions ( nx ) my_nx = data_partition % last ( me ) - data_partition % first ( me ) + 1 if ( allocated ( self % s_ )) deallocate ( self % s_ ) allocate ( self % s_ ( my_nx , ny )) my_internal_left = merge ( 2 , 1 , me == 1 ) my_internal_right = merge ( my_nx - 1 , my_nx , me == num_subdomains ) self % s_ ( my_internal_left : my_internal_right , 1 ) = boundary_val ! bottom subdomain boundary self % s_ ( my_internal_left : my_internal_right , ny ) = boundary_val ! top subdomain boundary self % s_ ( my_internal_left : my_internal_right , 2 : ny - 1 ) = internal_val ! internal points self % s_ ( 1 , 2 : ny - 1 ) = merge ( boundary_val , internal_val , me == 1 ) ! left subdomain boundary self % s_ ( my_nx , 2 : ny - 1 ) = merge ( boundary_val , internal_val , me == num_subdomains ) ! right subdomain boundary if ( allocated ( halo_x )) deallocate ( halo_x ) allocate ( halo_x ( west : east , ny )[ * ]) if ( me > 1 ) halo_x ( east ,:)[ me - 1 ] = self % s_ ( 1 ,:) if ( me < num_subdomains ) halo_x ( west ,:)[ me + 1 ] = self % s_ ( my_nx ,:) sync all end procedure module procedure dx my_dx = dx_ end procedure module procedure dy my_dy = dy_ end procedure module procedure laplacian integer i , j real , allocatable :: halo_left (:), halo_right (:) call assert ( allocated ( rhs % s_ ), \"subdomain_t%laplacian: allocated(rhs%s_)\" ) call assert ( allocated ( halo_x ), \"subdomain_t%laplacian: allocated(halo_x)\" ) allocate ( laplacian_rhs % s_ ( my_nx , ny )) halo_left = merge ( halo_x ( west ,:), rhs % s_ ( 1 ,:), me /= 1 ) i = my_internal_left call assert ( i + 1 <= my_nx , \"laplacian: leftmost subdomain too small\" ) do concurrent ( j = 2 : ny - 1 ) laplacian_rhs % s_ ( i , j ) = ( halo_left ( j ) - 2 * rhs % s_ ( i , j ) + rhs % s_ ( i + 1 , j )) / dx_ ** 2 + & ( rhs % s_ ( i , j - 1 ) - 2 * rhs % s_ ( i , j ) + rhs % s_ ( i , j + 1 )) / dy_ ** 2 end do do concurrent ( i = my_internal_left + 1 : my_internal_right - 1 , j = 2 : ny - 1 ) laplacian_rhs % s_ ( i , j ) = ( rhs % s_ ( i - 1 , j ) - 2 * rhs % s_ ( i , j ) + rhs % s_ ( i + 1 , j )) / dx_ ** 2 + & ( rhs % s_ ( i , j - 1 ) - 2 * rhs % s_ ( i , j ) + rhs % s_ ( i , j + 1 )) / dy_ ** 2 end do halo_right = merge ( halo_x ( east ,:), rhs % s_ ( my_nx ,:), me /= num_subdomains ) i = my_internal_right call assert ( i - 1 > 0 , \"laplacian: rightmost subdomain too small\" ) do concurrent ( j = 2 : ny - 1 ) laplacian_rhs % s_ ( i , j ) = ( rhs % s_ ( i - 1 , j ) - 2 * rhs % s_ ( i , j ) + halo_right ( j )) / dx_ ** 2 + & ( rhs % s_ ( i , j - 1 ) - 2 * rhs % s_ ( i , j ) + rhs % s_ ( i , j + 1 )) / dy_ ** 2 end do laplacian_rhs % s_ (:, 1 ) = 0. laplacian_rhs % s_ (:, ny ) = 0. if ( me == 1 ) laplacian_rhs % s_ ( 1 ,:) = 0. if ( me == num_subdomains ) laplacian_rhs % s_ ( my_nx ,:) = 0. end procedure module procedure multiply call assert ( allocated ( rhs % s_ ), \"subdomain_t%multiply: allocated(rhs%s_)\" ) product % s_ = lhs * rhs % s_ end procedure module procedure add call assert ( allocated ( rhs % s_ ), \"subdomain_t%add: allocated(rhs%s_)\" ) total % s_ = lhs % s_ + rhs % s_ end procedure module procedure assign_and_sync call assert ( allocated ( rhs % s_ ), \"subdomain_t%assign_and_sync: allocated(rhs%s_)\" ) sync all lhs % s_ = rhs % s_ if ( me > 1 ) halo_x ( east ,:)[ me - 1 ] = rhs % s_ ( 1 ,:) if ( me < num_subdomains ) halo_x ( west ,:)[ me + 1 ] = rhs % s_ ( my_nx ,:) sync all end procedure module procedure values call assert ( allocated ( self % s_ ), \"subdomain_t%values: allocated(self%s_)\" ) my_values = self % s_ end procedure end submodule subdomain_s","tags":"","loc":"sourcefile/subdomain_s.f90.html"},{"title":"input_m.f90 – Matcha","text":"Files dependent on this one sourcefile~~input_m.f90~~AfferentGraph sourcefile~input_m.f90 input_m.f90 sourcefile~matcha_m.f90 matcha_m.f90 sourcefile~matcha_m.f90->sourcefile~input_m.f90 sourcefile~output_m.f90 output_m.f90 sourcefile~matcha_m.f90->sourcefile~output_m.f90 sourcefile~output_m.f90->sourcefile~input_m.f90 sourcefile~input_s.f90 input_s.f90 sourcefile~input_s.f90->sourcefile~input_m.f90 sourcefile~matcha_s.f90 matcha_s.F90 sourcefile~matcha_s.f90->sourcefile~matcha_m.f90 sourcefile~main.f90 main.F90 sourcefile~main.f90->sourcefile~matcha_m.f90 sourcefile~output_s.f90 output_s.f90 sourcefile~output_s.f90->sourcefile~output_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules input_m Source Code input_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module input_m implicit none private public :: input_t type input_t private integer :: num_cells_ = 6000 , num_positions_ = 6000 , num_dimensions_ = 3 , num_intervals_ = 4 double precision :: time_step_ = 0.1D0 !double precision, allocatable :: sample_distribution_(:,:) !allocate(sample_distribution_(num_intervals_,2)) contains procedure :: num_cells procedure :: num_positions procedure :: num_dimensions procedure :: num_intervals procedure :: time_step procedure :: sample_distribution end type interface pure module function num_cells ( self ) result ( n ) implicit none class ( input_t ), intent ( in ) :: self integer n end function pure module function num_positions ( self ) result ( n ) implicit none class ( input_t ), intent ( in ) :: self integer n end function pure module function num_dimensions ( self ) result ( n ) implicit none class ( input_t ), intent ( in ) :: self integer n end function pure module function num_intervals ( self ) result ( n ) implicit none class ( input_t ), intent ( in ) :: self integer n end function pure module function time_step ( self ) result ( dt ) implicit none class ( input_t ), intent ( in ) :: self double precision dt end function time_step pure module function sample_distribution ( self ) result ( empirical_distribution ) implicit none class ( input_t ), intent ( in ) :: self double precision , allocatable :: empirical_distribution (:,:) end function sample_distribution end interface end module input_m","tags":"","loc":"sourcefile/input_m.f90.html"},{"title":"do_concurrent_m.f90 – Matcha","text":"This file depends on sourcefile~~do_concurrent_m.f90~~EfferentGraph sourcefile~do_concurrent_m.f90 do_concurrent_m.f90 sourcefile~t_cell_collection_m.f90 t_cell_collection_m.f90 sourcefile~do_concurrent_m.f90->sourcefile~t_cell_collection_m.f90 sourcefile~distribution_m.f90 distribution_m.f90 sourcefile~t_cell_collection_m.f90->sourcefile~distribution_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Files dependent on this one sourcefile~~do_concurrent_m.f90~~AfferentGraph sourcefile~do_concurrent_m.f90 do_concurrent_m.f90 sourcefile~do_concurrent_s.f90 do_concurrent_s.f90 sourcefile~do_concurrent_s.f90->sourcefile~do_concurrent_m.f90 sourcefile~output_s.f90 output_s.f90 sourcefile~output_s.f90->sourcefile~do_concurrent_m.f90 sourcefile~distribution_s.f90 distribution_s.F90 sourcefile~distribution_s.f90->sourcefile~do_concurrent_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules do_concurrent_m Source Code do_concurrent_m.f90 Source Code module do_concurrent_m use iso_c_binding , only : c_double , c_int use t_cell_collection_m , only : t_cell_collection_t , t_cell_collection_bind_C_t implicit none private public :: do_concurrent_sampled_speeds , do_concurrent_my_velocities , do_concurrent_k , do_concurrent_speeds public :: do_concurrent_output_distribution interface pure module subroutine do_concurrent_sampled_speeds ( speeds , vel , cumulative_distribution , sampled_speeds ) bind ( C ) implicit none real ( c_double ), intent ( in ) :: speeds (:,:), vel (:), cumulative_distribution (:) real ( c_double ), intent ( out ), allocatable :: sampled_speeds (:,:) end subroutine pure module subroutine do_concurrent_my_velocities ( nsteps , dir , sampled_speeds , my_velocities ) bind ( C ) implicit none integer ( c_int ), intent ( in ) :: nsteps real ( c_double ), intent ( in ) :: dir (:,:,:), sampled_speeds (:,:) real ( c_double ), intent ( out ), allocatable :: my_velocities (:,:,:) end subroutine pure module subroutine do_concurrent_k ( speeds , vel , k ) bind ( C ) implicit none real ( c_double ), intent ( in ) :: speeds (:), vel (:) integer ( c_int ), intent ( out ), allocatable :: k (:) end subroutine pure module subroutine & do_concurrent_output_distribution ( nintervals , speed , freq , emp_distribution , k , output_distribution ) bind ( C ) implicit none integer ( c_int ), intent ( in ) :: nintervals , speed , freq , k (:) real ( c_double ), intent ( in ) :: emp_distribution (:,:) real ( c_double ), intent ( out ), allocatable :: output_distribution (:,:) end subroutine module subroutine do_concurrent_speeds ( history , speeds ) bind ( C ) implicit none type ( t_cell_collection_bind_C_t ), intent ( in ) :: history (:) real ( c_double ), intent ( out ), allocatable :: speeds (:) end subroutine end interface end module do_concurrent_m","tags":"","loc":"sourcefile/do_concurrent_m.f90.html"},{"title":"output_m.f90 – Matcha","text":"This file depends on sourcefile~~output_m.f90~~EfferentGraph sourcefile~output_m.f90 output_m.f90 sourcefile~input_m.f90 input_m.f90 sourcefile~output_m.f90->sourcefile~input_m.f90 sourcefile~t_cell_collection_m.f90 t_cell_collection_m.f90 sourcefile~output_m.f90->sourcefile~t_cell_collection_m.f90 sourcefile~distribution_m.f90 distribution_m.f90 sourcefile~t_cell_collection_m.f90->sourcefile~distribution_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Files dependent on this one sourcefile~~output_m.f90~~AfferentGraph sourcefile~output_m.f90 output_m.f90 sourcefile~matcha_m.f90 matcha_m.f90 sourcefile~matcha_m.f90->sourcefile~output_m.f90 sourcefile~output_s.f90 output_s.f90 sourcefile~output_s.f90->sourcefile~output_m.f90 sourcefile~matcha_s.f90 matcha_s.F90 sourcefile~matcha_s.f90->sourcefile~matcha_m.f90 sourcefile~main.f90 main.F90 sourcefile~main.f90->sourcefile~matcha_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules output_m Source Code output_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module output_m !! Output data abstraction use input_m , only : input_t use t_cell_collection_m , only : t_cell_collection_t implicit none private public :: output_t type output_t !! Encapsulate an input/result pair private type ( input_t ) input_ type ( t_cell_collection_t ), allocatable :: history_ (:) contains procedure :: simulated_distribution procedure :: my_num_cells end type interface output_t pure module function construct ( input , history ) result ( output ) !! Construct a new output_t object implicit none type ( input_t ), intent ( in ) :: input type ( t_cell_collection_t ), intent ( in ) :: history (:) type ( output_t ) :: output end function end interface interface module function simulated_distribution ( self ) result ( output_distribution ) !! The result is a histogram calculated from the simulation output implicit none class ( output_t ), intent ( in ) :: self double precision , allocatable :: output_distribution (:,:) end function pure module function my_num_cells ( self ) result ( num_cells ) implicit none class ( output_t ), intent ( in ) :: self integer num_cells end function end interface end module output_m","tags":"","loc":"sourcefile/output_m.f90.html"},{"title":"do_concurrent_s.f90 – Matcha","text":"This file depends on sourcefile~~do_concurrent_s.f90~~EfferentGraph sourcefile~do_concurrent_s.f90 do_concurrent_s.f90 sourcefile~do_concurrent_m.f90 do_concurrent_m.f90 sourcefile~do_concurrent_s.f90->sourcefile~do_concurrent_m.f90 sourcefile~t_cell_collection_m.f90 t_cell_collection_m.f90 sourcefile~do_concurrent_m.f90->sourcefile~t_cell_collection_m.f90 sourcefile~distribution_m.f90 distribution_m.f90 sourcefile~t_cell_collection_m.f90->sourcefile~distribution_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules do_concurrent_s Source Code do_concurrent_s.f90 Source Code submodule ( do_concurrent_m ) do_concurrent_s use iso_c_binding , only : c_f_pointer implicit none contains module procedure do_concurrent_sampled_speeds integer cell , step associate ( ncells => size ( speeds , 1 ), nsteps => size ( speeds , 2 )) allocate ( sampled_speeds ( ncells , nsteps )) do concurrent ( cell = 1 : ncells , step = 1 : nsteps ) associate ( k => findloc ( speeds ( cell , step ) >= cumulative_distribution , value = . false ., dim = 1 ) - 1 ) sampled_speeds ( cell , step ) = vel ( k ) end associate end do end associate end procedure module procedure do_concurrent_my_velocities integer step if ( allocated ( my_velocities )) deallocate ( my_velocities ) allocate ( my_velocities , mold = dir ) do concurrent ( step = 1 : nsteps ) my_velocities (:, step , 1 ) = sampled_speeds (:, step ) * dir (:, step , 1 ) my_velocities (:, step , 2 ) = sampled_speeds (:, step ) * dir (:, step , 2 ) my_velocities (:, step , 3 ) = sampled_speeds (:, step ) * dir (:, step , 3 ) end do end procedure module procedure do_concurrent_k integer i associate ( nspeeds => size ( speeds )) if ( allocated ( k )) deallocate ( k ) allocate ( k ( nspeeds )) do concurrent ( i = 1 : nspeeds ) k ( i ) = findloc ( speeds ( i ) >= vel , value = . false ., dim = 1 ) - 1 end do end associate end procedure module procedure do_concurrent_output_distribution integer i if ( allocated ( output_distribution )) deallocate ( output_distribution ) allocate ( output_distribution ( nintervals , 2 )) output_distribution (:, freq ) = 0.d0 output_distribution (:, speed ) = emp_distribution (:, speed ) do concurrent ( i = 1 : size ( output_distribution , 1 )) output_distribution ( i , freq ) = count ( k == i ) end do end procedure module procedure do_concurrent_speeds integer i , j , k integer , parameter :: nspacedims = 3 real ( c_double ), pointer :: positions (:,:) real ( c_double ), allocatable :: x (:,:,:) associate ( npositions => size ( history ), ncells => history ( 1 )% positions_shape ( 1 )) allocate ( x ( npositions , ncells , nspacedims )) do i = 1 , npositions call c_f_pointer ( history ( i )% positions_ptr , positions , history ( 1 )% positions_shape ) x ( i ,:,:) = positions end do associate ( t => history % time ) allocate ( speeds ( ncells * ( npositions - 1 ))) do concurrent ( i = 1 : npositions - 1 , j = 1 : ncells ) associate ( & u => ( x ( i + 1 , j ,:) - x ( i , j ,:)) / ( t ( i + 1 ) - t ( i )), & ij => i + ( j - 1 ) * ( npositions - 1 ) & ) speeds ( ij ) = sqrt ( sum ([( u ( k ) ** 2 , k = 1 , nspacedims )])) end associate end do end associate end associate end procedure end submodule do_concurrent_s","tags":"","loc":"sourcefile/do_concurrent_s.f90.html"},{"title":"t_cell_collection_m.f90 – Matcha","text":"This file depends on sourcefile~~t_cell_collection_m.f90~~EfferentGraph sourcefile~t_cell_collection_m.f90 t_cell_collection_m.f90 sourcefile~distribution_m.f90 distribution_m.f90 sourcefile~t_cell_collection_m.f90->sourcefile~distribution_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Files dependent on this one sourcefile~~t_cell_collection_m.f90~~AfferentGraph sourcefile~t_cell_collection_m.f90 t_cell_collection_m.f90 sourcefile~matcha_m.f90 matcha_m.f90 sourcefile~matcha_m.f90->sourcefile~t_cell_collection_m.f90 sourcefile~output_m.f90 output_m.f90 sourcefile~matcha_m.f90->sourcefile~output_m.f90 sourcefile~t_cell_collection_s.f90 t_cell_collection_s.F90 sourcefile~t_cell_collection_s.f90->sourcefile~t_cell_collection_m.f90 sourcefile~matcha_s.f90 matcha_s.F90 sourcefile~matcha_s.f90->sourcefile~t_cell_collection_m.f90 sourcefile~matcha_s.f90->sourcefile~matcha_m.f90 sourcefile~output_m.f90->sourcefile~t_cell_collection_m.f90 sourcefile~do_concurrent_m.f90 do_concurrent_m.f90 sourcefile~do_concurrent_m.f90->sourcefile~t_cell_collection_m.f90 sourcefile~output_s.f90 output_s.f90 sourcefile~output_s.f90->sourcefile~t_cell_collection_m.f90 sourcefile~output_s.f90->sourcefile~output_m.f90 sourcefile~output_s.f90->sourcefile~do_concurrent_m.f90 sourcefile~main.f90 main.F90 sourcefile~main.f90->sourcefile~matcha_m.f90 sourcefile~distribution_s.f90 distribution_s.F90 sourcefile~distribution_s.f90->sourcefile~do_concurrent_m.f90 sourcefile~do_concurrent_s.f90 do_concurrent_s.f90 sourcefile~do_concurrent_s.f90->sourcefile~do_concurrent_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules t_cell_collection_m Source Code t_cell_collection_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module t_cell_collection_m !! Define a T-cell abstraction for motility simulations use distribution_m , only : distribution_t use iso_c_binding , only : c_ptr , c_double , c_int implicit none private public :: t_cell_collection_t public :: t_cell_collection_bind_C_t type t_cell_collection_t !! Encapsulate the state of a collection of T cells private double precision , allocatable :: positions_ (:,:) !! position vectors double precision time_ !! time stamp contains procedure :: positions procedure :: time end type integer , parameter :: positions_dimension = 2 type , bind ( C ) :: t_cell_collection_bind_C_t type ( c_ptr ) positions_ptr integer ( c_int ) positions_shape ( positions_dimension ) real ( c_double ) time end type interface t_cell_collection_t pure module function construct ( positions , time ) result ( t_cell_collection ) !! Return a t_cell_collection_t object with rescaled position vectors and the provided time stamp implicit none double precision , intent ( in ) :: positions (:,:), time type ( t_cell_collection_t ) t_cell_collection end function end interface interface t_cell_collection_bind_C_t elemental module function construct_bind_C ( t_cell_collection ) result ( t_cell_collection_bind_C ) !! Result is bind(C) representation of the data inside a t_cell_collection_t object implicit none type ( t_cell_collection_t ), intent ( in ), target :: t_cell_collection type ( t_cell_collection_bind_C_t ) t_cell_collection_bind_C end function end interface interface pure module function positions ( self ) result ( my_positions ) !! Return the t_cell_collection_t object's position vectors implicit none class ( t_cell_collection_t ), intent ( in ) :: self double precision , allocatable :: my_positions (:,:) end function elemental module function time ( self ) result ( my_time ) !! Return the t_cell_collection_t object's time stamp implicit none class ( t_cell_collection_t ), intent ( in ) :: self double precision my_time end function end interface end module t_cell_collection_m","tags":"","loc":"sourcefile/t_cell_collection_m.f90.html"},{"title":"distribution_s.F90 – Matcha","text":"This file depends on sourcefile~~distribution_s.f90~~EfferentGraph sourcefile~distribution_s.f90 distribution_s.F90 sourcefile~distribution_m.f90 distribution_m.f90 sourcefile~distribution_s.f90->sourcefile~distribution_m.f90 sourcefile~do_concurrent_m.f90 do_concurrent_m.f90 sourcefile~distribution_s.f90->sourcefile~do_concurrent_m.f90 sourcefile~t_cell_collection_m.f90 t_cell_collection_m.f90 sourcefile~do_concurrent_m.f90->sourcefile~t_cell_collection_m.f90 sourcefile~t_cell_collection_m.f90->sourcefile~distribution_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules distribution_s Source Code distribution_s.F90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.tx submodule ( distribution_m ) distribution_s use intrinsic_array_m , only : intrinsic_array_t use do_concurrent_m , only : do_concurrent_sampled_speeds , do_concurrent_my_velocities use assert_m , only : assert implicit none contains pure function monotonically_increasing ( f ) result ( monotonic ) double precision , intent ( in ) :: f (:) logical monotonic integer i monotonic = all ([( f ( i + 1 ) >= f ( i ), i = 1 , size ( f ) - 1 )]) end function module procedure construct integer i call assert ( all ( sample_distribution (:, 2 ) >= 0.D0 ), \"distribution_t%construct: sample_distribution>=0.\" , & intrinsic_array_t ( sample_distribution )) associate ( nintervals => size ( sample_distribution , 1 )) distribution % vel_ = [( sample_distribution ( i , 1 ), i = 1 , nintervals )] ! Assign speeds to each distribution bin distribution % cumulative_distribution_ = [ 0.D0 , [( sum ( sample_distribution ( 1 : i , 2 )), i = 1 , nintervals )]] call assert ( monotonically_increasing ( distribution % cumulative_distribution_ ), & \"distribution_t: monotonically_increasing(distribution%cumulative_distribution_)\" , & intrinsic_array_t ( distribution % cumulative_distribution_ )) end associate end procedure construct module procedure cumulative_distribution call assert ( allocated ( self % cumulative_distribution_ ), & \"distribution_t%cumulative_distribution: allocated(cumulative_distribution_)\" ) my_cumulative_distribution = self % cumulative_distribution_ end procedure module procedure velocities double precision , allocatable :: sampled_speeds (:,:), dir (:,:,:) integer step call assert ( allocated ( self % cumulative_distribution_ ), & \"distribution_t%cumulative_distribution: allocated(cumulative_distribution_)\" ) call assert ( allocated ( self % vel_ ), \"distribution_t%cumulative_distribution: allocated(vel_)\" ) ! Sample from the distribution call do_concurrent_sampled_speeds ( speeds , self % vel_ , self % cumulative_distribution (), sampled_speeds ) associate ( nsteps => size ( speeds , 2 )) ! Create unit vectors dir = directions (:, 1 : nsteps ,:) associate ( dir_mag => sqrt ( dir (:,:, 1 ) ** 2 + dir (:,:, 2 ) ** 2 + dir (:,:, 3 ) ** 2 )) associate ( dir_mag_ => merge ( dir_mag , epsilon ( dir_mag ), dir_mag /= 0. )) dir (:,:, 1 ) = dir (:,:, 1 ) / dir_mag_ dir (:,:, 2 ) = dir (:,:, 2 ) / dir_mag_ dir (:,:, 3 ) = dir (:,:, 3 ) / dir_mag_ end associate end associate call do_concurrent_my_velocities ( nsteps , dir , sampled_speeds , my_velocities ) end associate end procedure end submodule distribution_s","tags":"","loc":"sourcefile/distribution_s.f90.html"},{"title":"subdomain_m.f90 – Matcha","text":"Files dependent on this one sourcefile~~subdomain_m.f90~~AfferentGraph sourcefile~subdomain_m.f90 subdomain_m.f90 sourcefile~matcha_m.f90 matcha_m.f90 sourcefile~matcha_m.f90->sourcefile~subdomain_m.f90 sourcefile~subdomain_s.f90 subdomain_s.f90 sourcefile~subdomain_s.f90->sourcefile~subdomain_m.f90 sourcefile~matcha_s.f90 matcha_s.F90 sourcefile~matcha_s.f90->sourcefile~matcha_m.f90 sourcefile~main.f90 main.F90 sourcefile~main.f90->sourcefile~matcha_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules subdomain_m Source Code subdomain_m.f90 Source Code module subdomain_m implicit none private public :: subdomain_t type subdomain_t private real , allocatable :: s_ (:,:) contains procedure , pass ( self ) :: define procedure :: laplacian generic :: operator (. laplacian .) => laplacian procedure , pass ( rhs ) :: multiply generic :: operator ( * ) => multiply procedure :: add generic :: operator ( + ) => add procedure :: assign_and_sync generic :: assignment ( = ) => assign_and_sync procedure dx procedure dy procedure values end type interface module subroutine define ( side , boundary_val , internal_val , n , self ) implicit none real , intent ( in ) :: side , boundary_val , internal_val integer , intent ( in ) :: n !! number of grid points in each coordinate direction class ( subdomain_t ), intent ( out ) :: self end subroutine pure module function values ( self ) result ( my_values ) implicit none class ( subdomain_t ), intent ( in ) :: self real , allocatable :: my_values (:,:) end function pure module function dx ( self ) result ( my_dx ) implicit none class ( subdomain_t ), intent ( in ) :: self real my_dx end function pure module function dy ( self ) result ( my_dy ) implicit none class ( subdomain_t ), intent ( in ) :: self real my_dy end function pure module function laplacian ( rhs ) result ( laplacian_rhs ) implicit none class ( subdomain_t ), intent ( in ) :: rhs type ( subdomain_t ) laplacian_rhs end function pure module function multiply ( lhs , rhs ) result ( product ) implicit none class ( subdomain_t ), intent ( in ) :: rhs real , intent ( in ) :: lhs type ( subdomain_t ) product end function pure module function add ( lhs , rhs ) result ( total ) implicit none class ( subdomain_t ), intent ( in ) :: lhs type ( subdomain_t ), intent ( in ) :: rhs type ( subdomain_t ) total end function module subroutine assign_and_sync ( lhs , rhs ) implicit none class ( subdomain_t ), intent ( out ) :: lhs type ( subdomain_t ), intent ( in ) :: rhs end subroutine end interface end module","tags":"","loc":"sourcefile/subdomain_m.f90.html"},{"title":"output_s.f90 – Matcha","text":"This file depends on sourcefile~~output_s.f90~~EfferentGraph sourcefile~output_s.f90 output_s.f90 sourcefile~output_m.f90 output_m.f90 sourcefile~output_s.f90->sourcefile~output_m.f90 sourcefile~t_cell_collection_m.f90 t_cell_collection_m.f90 sourcefile~output_s.f90->sourcefile~t_cell_collection_m.f90 sourcefile~do_concurrent_m.f90 do_concurrent_m.f90 sourcefile~output_s.f90->sourcefile~do_concurrent_m.f90 sourcefile~output_m.f90->sourcefile~t_cell_collection_m.f90 sourcefile~input_m.f90 input_m.f90 sourcefile~output_m.f90->sourcefile~input_m.f90 sourcefile~distribution_m.f90 distribution_m.f90 sourcefile~t_cell_collection_m.f90->sourcefile~distribution_m.f90 sourcefile~do_concurrent_m.f90->sourcefile~t_cell_collection_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules output_s Source Code output_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( output_m ) output_s use do_concurrent_m , only : do_concurrent_k , do_concurrent_output_distribution , do_concurrent_speeds use t_cell_collection_m , only : t_cell_collection_bind_C_t use iso_c_binding , only : c_loc , c_double implicit none contains module procedure construct output % input_ = input output % history_ = history end procedure module procedure my_num_cells num_cells = size ( self % history_ ( 1 )% positions (), 1 ) end procedure module procedure simulated_distribution integer i integer , allocatable :: k (:) real ( c_double ), allocatable , dimension (:) :: vel , speeds integer , parameter :: speed = 1 , freq = 2 ! subscripts for speeds and frequencies call do_concurrent_speeds ( t_cell_collection_bind_C_t ( self % history_ ), speeds ) associate ( emp_distribution => self % input_ % sample_distribution ()) associate ( nintervals => size ( emp_distribution (:, 1 )), dvel_half => ( emp_distribution ( 2 , speed ) - emp_distribution ( 1 , speed )) / 2.d0 ) vel = [ emp_distribution ( 1 , speed ) - dvel_half , [( emp_distribution ( i , speed ) + dvel_half , i = 1 , nintervals )]] call do_concurrent_k ( speeds , vel , k ) call do_concurrent_output_distribution ( nintervals , speed , freq , emp_distribution , k , output_distribution ) output_distribution (:, freq ) = output_distribution (:, freq ) / sum ( output_distribution (:, freq )) end associate end associate end procedure end submodule output_s","tags":"","loc":"sourcefile/output_s.f90.html"},{"title":"input_s.f90 – Matcha","text":"This file depends on sourcefile~~input_s.f90~~EfferentGraph sourcefile~input_s.f90 input_s.f90 sourcefile~input_m.f90 input_m.f90 sourcefile~input_s.f90->sourcefile~input_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules input_s Source Code input_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( input_m ) input_s implicit none contains module procedure num_cells n = self % num_cells_ end procedure module procedure num_positions n = self % num_positions_ end procedure module procedure num_dimensions n = self % num_dimensions_ end procedure module procedure num_intervals n = self % num_intervals_ end procedure module procedure time_step dt = self % time_step_ end procedure module procedure sample_distribution integer i , nintervals double precision speed_lower , speed_upper double precision range , pi , dspeed , sumy double precision speed_lower_bin double precision speed_upper_bin double precision speed_middle_bin double precision , allocatable :: speeds (:), probability (:) nintervals = self % num_intervals_ speed_lower = 0.d0 speed_upper = 6.d0 range = speed_upper - speed_lower pi = acos ( - 1.d0 ) dspeed = range / dble ( nintervals ) allocate ( speeds ( nintervals ), probability ( nintervals )) !    Create normal distribution sumy = 0.d0 do i = 1 , nintervals speed_lower_bin = speed_lower + dble ( i - 1 ) * dspeed speed_upper_bin = speed_lower + dble ( i ) * dspeed speed_middle_bin = 0.5d0 * ( speed_lower_bin + speed_upper_bin ) speeds ( i ) = speed_middle_bin probability ( i ) = exp ( - ( speeds ( i ) - 3.d0 ) ** 2 / 2.d0 ) / dsqrt ( 2.d0 * pi ) ! Use normal distribution sumy = sumy + probability ( i ) end do do i = 1 , nintervals probability ( i ) = probability ( i ) / sumy end do allocate ( empirical_distribution ( nintervals , 2 )) do i = 1 , nintervals empirical_distribution ( i , 1 ) = speeds ( i ) empirical_distribution ( i , 2 ) = probability ( i ) end do end procedure end submodule input_s","tags":"","loc":"sourcefile/input_s.f90.html"},{"title":"distribution_m.f90 – Matcha","text":"Files dependent on this one sourcefile~~distribution_m.f90~~AfferentGraph sourcefile~distribution_m.f90 distribution_m.f90 sourcefile~t_cell_collection_m.f90 t_cell_collection_m.f90 sourcefile~t_cell_collection_m.f90->sourcefile~distribution_m.f90 sourcefile~matcha_s.f90 matcha_s.F90 sourcefile~matcha_s.f90->sourcefile~distribution_m.f90 sourcefile~matcha_s.f90->sourcefile~t_cell_collection_m.f90 sourcefile~matcha_m.f90 matcha_m.f90 sourcefile~matcha_s.f90->sourcefile~matcha_m.f90 sourcefile~distribution_s.f90 distribution_s.F90 sourcefile~distribution_s.f90->sourcefile~distribution_m.f90 sourcefile~do_concurrent_m.f90 do_concurrent_m.f90 sourcefile~distribution_s.f90->sourcefile~do_concurrent_m.f90 sourcefile~matcha_m.f90->sourcefile~distribution_m.f90 sourcefile~matcha_m.f90->sourcefile~t_cell_collection_m.f90 sourcefile~output_m.f90 output_m.f90 sourcefile~matcha_m.f90->sourcefile~output_m.f90 sourcefile~t_cell_collection_s.f90 t_cell_collection_s.F90 sourcefile~t_cell_collection_s.f90->sourcefile~t_cell_collection_m.f90 sourcefile~output_s.f90 output_s.f90 sourcefile~output_s.f90->sourcefile~t_cell_collection_m.f90 sourcefile~output_s.f90->sourcefile~output_m.f90 sourcefile~output_s.f90->sourcefile~do_concurrent_m.f90 sourcefile~output_m.f90->sourcefile~t_cell_collection_m.f90 sourcefile~do_concurrent_m.f90->sourcefile~t_cell_collection_m.f90 sourcefile~main.f90 main.F90 sourcefile~main.f90->sourcefile~matcha_m.f90 sourcefile~do_concurrent_s.f90 do_concurrent_s.f90 sourcefile~do_concurrent_s.f90->sourcefile~do_concurrent_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules distribution_m Source Code distribution_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module distribution_m implicit none private public :: distribution_t type distribution_t private double precision , allocatable , dimension (:) :: vel_ , cumulative_distribution_ contains procedure :: cumulative_distribution procedure :: velocities end type interface distribution_t pure module function construct ( sample_distribution ) result ( distribution ) implicit none double precision , intent ( in ) :: sample_distribution (:,:) type ( distribution_t ) distribution end function end interface interface pure module function cumulative_distribution ( self ) result ( my_cumulative_distribution ) implicit none class ( distribution_t ), intent ( in ) :: self double precision , allocatable :: my_cumulative_distribution (:) end function pure module function velocities ( self , speeds , directions ) result ( my_velocities ) !! Return the t_cell_collection_t object's velocity vectors implicit none class ( distribution_t ), intent ( in ) :: self double precision , intent ( in ) :: speeds (:,:), directions (:,:,:) double precision , allocatable :: my_velocities (:,:,:) end function velocities end interface end module distribution_m","tags":"","loc":"sourcefile/distribution_m.f90.html"},{"title":"t_cell_collection_s.F90 – Matcha","text":"This file depends on sourcefile~~t_cell_collection_s.f90~~EfferentGraph sourcefile~t_cell_collection_s.f90 t_cell_collection_s.F90 sourcefile~t_cell_collection_m.f90 t_cell_collection_m.f90 sourcefile~t_cell_collection_s.f90->sourcefile~t_cell_collection_m.f90 sourcefile~distribution_m.f90 distribution_m.f90 sourcefile~t_cell_collection_m.f90->sourcefile~distribution_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Submodules t_cell_collection_s Source Code t_cell_collection_s.F90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( t_cell_collection_m ) t_cell_collection_s use iso_c_binding , only : c_loc use assert_m , only : assert implicit none contains module procedure construct t_cell_collection % positions_ = positions t_cell_collection % time_ = time end procedure module procedure positions call assert ( allocated ( self % positions_ ), \"t_cell_collection_t%positions: allocated(positions_)\" ) my_positions = self % positions_ end procedure module procedure time my_time = self % time_ end procedure module procedure construct_bind_C t_cell_collection_bind_C % positions_ptr = c_loc ( t_cell_collection % positions_ ) t_cell_collection_bind_C % positions_shape = shape ( t_cell_collection % positions_ ) t_cell_collection_bind_C % time = t_cell_collection % time_ end procedure end submodule t_cell_collection_s","tags":"","loc":"sourcefile/t_cell_collection_s.f90.html"},{"title":"main.F90 – Matcha","text":"This file depends on sourcefile~~main.f90~~EfferentGraph sourcefile~main.f90 main.F90 sourcefile~matcha_m.f90 matcha_m.f90 sourcefile~main.f90->sourcefile~matcha_m.f90 sourcefile~t_cell_collection_m.f90 t_cell_collection_m.f90 sourcefile~matcha_m.f90->sourcefile~t_cell_collection_m.f90 sourcefile~subdomain_m.f90 subdomain_m.f90 sourcefile~matcha_m.f90->sourcefile~subdomain_m.f90 sourcefile~input_m.f90 input_m.f90 sourcefile~matcha_m.f90->sourcefile~input_m.f90 sourcefile~distribution_m.f90 distribution_m.f90 sourcefile~matcha_m.f90->sourcefile~distribution_m.f90 sourcefile~output_m.f90 output_m.f90 sourcefile~matcha_m.f90->sourcefile~output_m.f90 sourcefile~t_cell_collection_m.f90->sourcefile~distribution_m.f90 sourcefile~output_m.f90->sourcefile~t_cell_collection_m.f90 sourcefile~output_m.f90->sourcefile~input_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Programs main Source Code main.F90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt program main !! Matcha: Motility Analysis of T-Cell Histories in Activation use matcha_m , only : matcha , input_t , output_t implicit none type ( output_t ) output associate ( input => input_t ()) output = output_t ( input , matcha ( input )) block double precision , allocatable :: simulated_distribution (:,:) integer , parameter :: freq = 2 integer num_cells num_cells = output % my_num_cells () simulated_distribution = output % simulated_distribution () simulated_distribution (:, freq ) = num_cells * simulated_distribution (:, freq ) call co_sum ( simulated_distribution (:, freq ), result_image = 1 ) call co_sum ( num_cells , result_image = 1 ) if ( this_image () == 1 ) simulated_distribution (:, freq ) = simulated_distribution (:, freq ) / dble ( num_cells ) end block end associate print * print * , \"----> Matcha done. <----\" end program","tags":"","loc":"sourcefile/main.f90.html"}]}